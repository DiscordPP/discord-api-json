{
  "content": [
    "|Gateways"
  ],
  "Gateways": {
    "content": [
      "Gateways are Discord's form of real-time communication over secure WebSockets. Clients will receive events and data over the gateway they are connected to and send data over the REST API. The API for interacting with Gateways is complex and fairly unforgiving, therefore it's highly recommended you read all of the following documentation before writing a custom implementation.",
      "Important note: Not all event fields are documented, in particular, fields prefixed with an underscore are considered internal fields and should not be relied on. We may change the format at any time.",
      "|Payloads"
    ],
    "Payloads": {
      "content": [
        "|Gateway Payload Structure",
        "|Encoding and Compression",
        "|Connecting to the Gateway",
        "|Resuming",
        "|Gateway Intents",
        "|Rate Limiting",
        "|Tracking State",
        "|Guild Availability",
        "|Sharding",
        "|Sharding for Large Bots",
        "|Commands and Events",
        "|Get Gateway % GET /gateway",
        "|Get Gateway Bot % GET /gateway/bot",
        "|Session Start Limit Object"
      ],
      "Gateway Payload Structure": {
        "content": [
          [
            [
              "Field",
              "Type",
              "Description"
            ],
            [
              "op",
              "integer",
              "opcode for the payload"
            ],
            [
              "d",
              "?mixed (any JSON value)",
              "event data"
            ],
            [
              "s",
              "?integer *",
              "sequence number, used for resuming sessions and heartbeats"
            ],
            [
              "t",
              "?string *",
              "the event name for this payload"
            ]
          ],
          "* s and t are null when op is not 0 (Gateway Dispatch Opcode).",
          "|Sending Payloads",
          "|Receiving Payloads"
        ],
        "Sending Payloads": {
          "content": [
            "Packets sent from the client to the Gateway API are encapsulated within a gateway payload object and must have the proper opcode and data object set. The payload object can then be serialized in the format of choice (see ETF/JSON), and sent over the websocket. Payloads to the gateway are limited to a maximum of 4096 bytes sent, going over this will cause a connection termination with error code 4002.",
            "|Example Gateway Dispatch"
          ],
          "Example Gateway Dispatch": {
            "content": [
              {
                "language": "json",
                "code": "{\n  \"op\": 0,\n  \"d\": {},\n  \"s\": 42,\n  \"t\": \"GATEWAY_EVENT_NAME\"\n}\n"
              }
            ]
          }
        },
        "Receiving Payloads": {
          "content": [
            "Receiving payloads with the Gateway API is slightly more complex than sending. When using the JSON encoding with Payload Compression enabled, the Gateway has the option of sending payloads as compressed JSON binaries using zlib, meaning your library must detect (see RFC1950 2.2) and decompress these payloads before attempting to parse them. Otherwise the gateway does implement a shared compression context between messages sent, see Transport Compression."
          ]
        }
      },
      "Encoding and Compression": {
        "content": [
          "|ETF/JSON"
        ],
        "ETF/JSON": {
          "content": [
            "When initially creating and handshaking connections to the Gateway, a user can choose whether they wish to communicate over plain-text JSON or binary ETF.",
            "|Using ETF",
            "|Payload Compression",
            "|Transport Compression"
          ],
          "Using ETF": {
            "content": [
              "While using ETF there are some additional constraints to note:",
              [
                "Snowflake IDs are transmitted as 64-bit integers or strings over ETF.",
                "The client must not send compressed messages to the server.",
                "Payloads must use string keys, atom keys will lead to a 4002 decode error."
              ],
              "See erlpack for an ETF implementation example."
            ]
          },
          "Payload Compression": {
            "content": [
              "When using JSON encoding with payload compression enabled (compress: true in identify), the Gateway may optionally send zlib-compressed payloads (see RFC1950 2.2). Your library must detect and decompress these payloads to plain-text JSON before attempting to parse them. If you are using payload compression, the gateway does not implement a shared compression context between messages sent. Payload compression will be disabled if you use transport compression (see below)."
            ]
          },
          "Transport Compression": {
            "content": [
              "Currently the only available transport compression option is zlib-stream. You will need to run all received packets through a shared zlib context, as seen in the example below. Every connection to the gateway should use its own unique zlib context.",
              "|Transport Compression Example"
            ],
            "Transport Compression Example": {
              "content": [
                {
                  "language": "python",
                  "code": "# Z_SYNC_FLUSH suffix\nZLIB_SUFFIX = b'\\x00\\x00\\xff\\xff'\n# initialize a buffer to store chunks\nbuffer = bytearray()\n# create a zlib inflation context to run chunks through\ninflator = zlib.decompressobj()\n\n# ...\ndef on_websocket_message(msg):\n  # always push the message data to your cache\n  buffer.extend(msg)\n\n  # check if the last four bytes are equal to ZLIB_SUFFIX\n  if len(msg) < 4 or msg[-4:] != ZLIB_SUFFIX:\n    return\n\n  # if the message *does* end with ZLIB_SUFFIX,\n  # get the full message by decompressing the buffers\n  # NOTE: the message is utf-8 encoded.\n  msg = inflator.decompress(buffer)\n  buffer = bytearray()\n\n  # here you can treat `msg` as either JSON or ETF encoded,\n  # depending on your `encoding` param\n"
                }
              ]
            }
          }
        }
      },
      "Connecting to the Gateway": {
        "content": [
          "|Connecting",
          "|Heartbeating",
          "|Identifying"
        ],
        "Connecting": {
          "content": [
            "|Gateway URL Query String Params"
          ],
          "Gateway URL Query String Params": {
            "content": [
              [
                [
                  "Field",
                  "Type",
                  "Description",
                  "Accepted Values"
                ],
                [
                  "v",
                  "integer",
                  "API Version to use",
                  "see API versions"
                ],
                [
                  "encoding",
                  "string",
                  "The encoding of received gateway packets",
                  "json or etf"
                ],
                [
                  "compress?",
                  "string",
                  "The (optional) compression of gateway packets",
                  "zlib-stream"
                ]
              ],
              "The first step in establishing connectivity to the gateway is requesting a valid websocket endpoint from the API. This can be done through either the Get Gateway or the Get Gateway Bot endpoint.",
              "With the resulting payload, you can now open a websocket connection to the \"url\" (or endpoint) specified. Generally, it is a good idea to explicitly pass the API version and encoding. For example, we may connect to wss://gateway.discord.gg/?v=10&encoding=json.",
              "Once connected, the client should immediately receive an Opcode 10 Hello payload, with information on the connection's heartbeat interval:",
              "|Example Gateway Hello"
            ],
            "Example Gateway Hello": {
              "content": [
                {
                  "language": "json",
                  "code": "{\n  \"op\": 10,\n  \"d\": {\n    \"heartbeat_interval\": 45000\n  }\n}\n"
                }
              ]
            }
          }
        },
        "Heartbeating": {
          "content": [
            "After receiving Opcode 10 Hello, the client may begin sending Opcode 1 Heartbeat payloads after heartbeat_interval * jitter milliseconds (where jitter is a random value between 0 and 1), and every heartbeat_interval milliseconds thereafter. You may send heartbeats before this interval elapses, but you should avoid doing so unless necessary. There is already tolerance in the heartbeat_interval that will cover network latency, so you do not need to account for it in your own implementation - waiting the precise interval will suffice.",
            "The gateway may request a heartbeat from the client in some situations by sending an Opcode 1 Heartbeat. When this occurs, the client should immediately send an Opcode 1 Heartbeat without waiting the remainder of the current interval.",
            "Any time the client sends a heartbeat, the gateway will respond with Opcode 11 Heartbeat ACK, a successful acknowledgement of their last heartbeat:",
            "|Example Gateway Heartbeat ACK"
          ],
          "Example Gateway Heartbeat ACK": {
            "content": [
              {
                "language": "json",
                "code": "{\n  \"op\": 11\n}\n"
              },
              "If a client does not receive a heartbeat ack between its attempts at sending heartbeats, this may be due to a failed or \"zombied\" connection. The client should then immediately terminate the connection with a non-1000 close code, reconnect, and attempt to Resume.",
              "> info\n> In the event of a service outage where you stay connected to the gateway, you should continue to heartbeat and receive ACKs. The gateway will eventually respond and issue a session once it's able to."
            ]
          }
        },
        "Identifying": {
          "content": [
            "Next, the client is expected to send an Opcode 2 Identify:",
            "|Example Gateway Identify"
          ],
          "Example Gateway Identify": {
            "content": [
              "This is a minimal IDENTIFY payload. IDENTIFY supports additional optional fields for other session properties, such as payload compression, or an initial presence state. See the Identify Structure for a more complete example of all options you can pass in.",
              {
                "language": "json",
                "code": "{\n  \"op\": 2,\n  \"d\": {\n    \"token\": \"my_token\",\n    \"intents\": 513,\n    \"properties\": {\n      \"os\": \"linux\",\n      \"browser\": \"my_library\",\n      \"device\": \"my_library\"\n    }\n  }\n}\n"
              },
              "If the payload is valid, the gateway will respond with a Ready event. Your client is now considered in a \"connected\" state. Clients are limited by maximum concurrency when Identifying; if they exceed this limit, the gateway will respond with an Opcode 9 Invalid Session. It is important to note that although the ready event contains a large portion of the required initial state, some information (such as guilds and their members) is sent asynchronously (see Guild Create event).",
              "> warn\n> Clients are limited to 1000 IDENTIFY calls to the websocket in a 24-hour period. This limit is global and across all shards, but does not include RESUME calls. Upon hitting this limit, all active sessions for the bot will be terminated, the bot's token will be reset, and the owner will receive an email notification. It's up to the owner to update their application with the new token."
            ]
          }
        }
      },
      "Resuming": {
        "content": [
          "The Internet is a scary place. Disconnections happen, especially with persistent connections. Due to Discord's architecture, this is a semi-regular event and should be expected and handled. Discord has a process for \"resuming\" (or reconnecting) a connection that allows the client to replay any lost events from the last sequence number they received in the exact same way they would receive them normally.",
          "Your client should store the session_id and resume_gateway_url from the Ready, and the sequence number of the last event it received. When your client detects that it has been disconnected, it should completely close the connection and open a new one (following the same strategy as Connecting) to resume_gateway_url. Once the new connection has been opened, the client should send a Gateway Resume:",
          "|Example Gateway Resume",
          "|Disconnections"
        ],
        "Example Gateway Resume": {
          "content": [
            {
              "language": "json",
              "code": "{\n  \"op\": 6,\n  \"d\": {\n    \"token\": \"my_token\",\n    \"session_id\": \"session_id_i_stored\",\n    \"seq\": 1337\n  }\n}\n"
            },
            "If successful, the gateway will respond by replaying all missed events in order, finishing with a Resumed event to signal replay has finished, and all subsequent events are new. It's also possible that your client cannot reconnect in time to resume, in which case the client will receive a Opcode 9 Invalid Session and is expected to wait a random amount of time\u2014between 1 and 5 seconds\u2014then send a fresh Opcode 2 Identify.",
            "Failure to respect the resume_gateway_url may result in your client being forced to reconnect again after a short period of time."
          ]
        },
        "Disconnections": {
          "content": [
            "If the gateway ever issues a disconnect to your client, it will provide a close event code that you can use to properly handle the disconnection. A full list of these close codes can be found in the Response Codes documentation.",
            "When you close the connection to the gateway with the close code 1000 or 1001, your session will be invalidated and your bot will appear offline. If you simply close the TCP connection, or use a different close code, the bot session will remain active and timeout after a few minutes. This can be useful for a reconnect, which will resume the previous session."
          ]
        }
      },
      "Gateway Intents": {
        "content": [
          "> info\n> Intents are optionally supported on the v6 gateway but required as of v8",
          "> info\n> Starting in v10, MESSAGE_CONTENT (1 << 15) is required to receive non-empty values for content fields (content, attachments, embeds, and components). This doesn't apply for DMs, messages your bot sends, or messages in which your bot is mentioned. MESSAGE_CONTENT is not currently required for previous API versions.",
          "Maintaining a stateful application can be difficult when it comes to the amount of data you're expected to process, especially at scale. Gateway Intents are a system to help you lower that computational burden.",
          "When identifying to the gateway, you can specify an intents parameter which allows you to conditionally subscribe to pre-defined \"intents\", groups of events (or event data) defined by Discord. If you do not specify a certain intent, you will not receive any of the gateway events that are batched into that group. The valid intents are:",
          "|List of Intents",
          "|Caveats",
          "|Privileged Intents"
        ],
        "List of Intents": {
          "content": [
            {
              "language": "",
              "code": "GUILDS (1 << 0)\n  - GUILD_CREATE\n  - GUILD_UPDATE\n  - GUILD_DELETE\n  - GUILD_ROLE_CREATE\n  - GUILD_ROLE_UPDATE\n  - GUILD_ROLE_DELETE\n  - CHANNEL_CREATE\n  - CHANNEL_UPDATE\n  - CHANNEL_DELETE\n  - CHANNEL_PINS_UPDATE\n  - THREAD_CREATE\n  - THREAD_UPDATE\n  - THREAD_DELETE\n  - THREAD_LIST_SYNC\n  - THREAD_MEMBER_UPDATE\n  - THREAD_MEMBERS_UPDATE *\n  - STAGE_INSTANCE_CREATE\n  - STAGE_INSTANCE_UPDATE\n  - STAGE_INSTANCE_DELETE\n\nGUILD_MEMBERS (1 << 1)\n  - GUILD_MEMBER_ADD\n  - GUILD_MEMBER_UPDATE\n  - GUILD_MEMBER_REMOVE\n  - THREAD_MEMBERS_UPDATE *\n\nGUILD_BANS (1 << 2)\n  - GUILD_BAN_ADD\n  - GUILD_BAN_REMOVE\n\nGUILD_EMOJIS_AND_STICKERS (1 << 3)\n  - GUILD_EMOJIS_UPDATE\n  - GUILD_STICKERS_UPDATE\n\nGUILD_INTEGRATIONS (1 << 4)\n  - GUILD_INTEGRATIONS_UPDATE\n  - INTEGRATION_CREATE\n  - INTEGRATION_UPDATE\n  - INTEGRATION_DELETE\n\nGUILD_WEBHOOKS (1 << 5)\n  - WEBHOOKS_UPDATE\n\nGUILD_INVITES (1 << 6)\n  - INVITE_CREATE\n  - INVITE_DELETE\n\nGUILD_VOICE_STATES (1 << 7)\n  - VOICE_STATE_UPDATE\n\nGUILD_PRESENCES (1 << 8)\n  - PRESENCE_UPDATE\n\nGUILD_MESSAGES (1 << 9)\n  - MESSAGE_CREATE\n  - MESSAGE_UPDATE\n  - MESSAGE_DELETE\n  - MESSAGE_DELETE_BULK\n\nGUILD_MESSAGE_REACTIONS (1 << 10)\n  - MESSAGE_REACTION_ADD\n  - MESSAGE_REACTION_REMOVE\n  - MESSAGE_REACTION_REMOVE_ALL\n  - MESSAGE_REACTION_REMOVE_EMOJI\n\nGUILD_MESSAGE_TYPING (1 << 11)\n  - TYPING_START\n\nDIRECT_MESSAGES (1 << 12)\n  - MESSAGE_CREATE\n  - MESSAGE_UPDATE\n  - MESSAGE_DELETE\n  - CHANNEL_PINS_UPDATE\n\nDIRECT_MESSAGE_REACTIONS (1 << 13)\n  - MESSAGE_REACTION_ADD\n  - MESSAGE_REACTION_REMOVE\n  - MESSAGE_REACTION_REMOVE_ALL\n  - MESSAGE_REACTION_REMOVE_EMOJI\n\nDIRECT_MESSAGE_TYPING (1 << 14)\n  - TYPING_START\n\nMESSAGE_CONTENT (1 << 15) **\n\nGUILD_SCHEDULED_EVENTS (1 << 16)\n  - GUILD_SCHEDULED_EVENT_CREATE\n  - GUILD_SCHEDULED_EVENT_UPDATE\n  - GUILD_SCHEDULED_EVENT_DELETE\n  - GUILD_SCHEDULED_EVENT_USER_ADD\n  - GUILD_SCHEDULED_EVENT_USER_REMOVE\n\nAUTO_MODERATION_CONFIGURATION (1 << 20)\n  - AUTO_MODERATION_RULE_CREATE\n  - AUTO_MODERATION_RULE_UPDATE\n  - AUTO_MODERATION_RULE_DELETE\n\nAUTO_MODERATION_EXECUTION (1 << 21)\n  - AUTO_MODERATION_ACTION_EXECUTION\n\n"
            },
            "* Thread Members Update contains different data depending on which intents are used.",
            "** MESSAGE_CONTENT is a special case as it doesn't represent individual events, but rather affects the data sent for most events that could contain message content fields (content, attachments, embeds, and components)."
          ]
        },
        "Caveats": {
          "content": [
            "Any events not defined in an intent are considered \"passthrough\" and will always be sent to you.",
            "Guild Member Update is sent for current-user updates regardless of whether the GUILD_MEMBERS intent is set.",
            "Guild Create and Request Guild Members are uniquely affected by intents. See these sections for more information.",
            "Thread Members Update by default only includes if the current user was added to or removed from a thread.  To receive these updates for other users, request the GUILD_MEMBERS Gateway Intent.",
            "If you specify an intents value in your IDENTIFY payload that is invalid, the socket will close with a 4013 close code. An invalid intent is one that is not meaningful and not documented above.",
            "If you specify an intents value in your IDENTIFY payload that is disallowed, the socket will close with a 4014 close code. A disallowed intent is a privileged intent that has not been approved for your bot.",
            "Bots in under 100 guilds can enable these intents in the bot tab of the developer dashboard. Verified bots can get access to privileged intents when getting verified, or by writing into support after getting verified."
          ]
        },
        "Privileged Intents": {
          "content": [
            "> warn\n> MESSAGE_CONTENT will become a privileged intent in Aug 2022. Learn more here or read the guide on upgrading to commands.",
            "Some intents are defined as \"Privileged\" due to the sensitive nature of the data. Those intents are:",
            [
              "GUILD_PRESENCES",
              "GUILD_MEMBERS"
            ],
            "To specify these intents in your IDENTIFY payload, you must visit your application page in the Developer Portal and enable the toggle for each Privileged Intent that you wish to use. If your bot qualifies for verification, you must first verify your bot and request access to these intents during the verification process. If your bot is already verified and you need to request additional privileged intents, contact support.",
            "Events under the GUILD_PRESENCES and GUILD_MEMBERS intents are turned off by default on all API versions. If you are using API v6, you will receive those events if you are authorized to receive them and have enabled the intents in the Developer Portal. You do not need to use Intents on API v6 to receive these events; you just need to enable the flags.",
            "If you are using API v8 or above, Intents are mandatory and must be specified when identifying.",
            "In addition to the gateway restrictions described here, Discord's REST API is also affected by Privileged Intents. Specifically, to use the List Guild Members endpoint, you must have the GUILD_MEMBERS intent enabled for your application. This behavior is independent of whether the intent is set during IDENTIFY."
          ]
        }
      },
      "Rate Limiting": {
        "content": [
          "> info\n> This section is about Gateway rate limits, not HTTP API rate limits",
          "Clients are allowed to send 120 gateway commands every 60 seconds, meaning you can send an average of 2 commands per second. Clients who surpass this limit are immediately disconnected from the Gateway, and similarly to the HTTP API, repeat offenders will have their API access revoked. Clients also have a limit of concurrent Identify requests allowed per 5 seconds. If you hit this limit, the Gateway will respond with an Opcode 9 Invalid Session."
        ]
      },
      "Tracking State": {
        "content": [
          "Most of a client's state is provided during the initial Ready event and the Guild Create events that immediately follow. As objects are further created/updated/deleted, other events are sent to notify the client of these changes and to provide the new or updated data. To avoid excessive API calls, Discord expects clients to locally cache as many relevant object states as possible, and to update them as gateway events are received.",
          "An example of state tracking can be found with member status caching. When initially connecting to the gateway, the client receives information regarding the online status of guild members (online, idle, dnd, offline). To keep this state updated, a client must track and parse Presence Update events as they are received, and apply the provided data to the cached member objects.",
          "For larger bots, client state can grow to be quite large. We recommend only storing objects in memory that are needed for a bot's operation. Many bots, for example, just respond to user input through chat commands. These bots may only need to keep guild information (like guild/channel roles and permissions) in memory, since MESSAGE_CREATE and MESSAGE_UPDATE events have the full member object available."
        ]
      },
      "Guild Availability": {
        "content": [
          "When connecting to the gateway as a bot user, guilds that the bot is a part of will start out as unavailable. Don't fret! The gateway will automatically attempt to reconnect on your behalf. As guilds become available to you, you will receive Guild Create events."
        ]
      },
      "Sharding": {
        "content": [
          "As bots grow and are added to an increasing number of guilds, some developers may find it necessary to break or split portions of their bots operations into separate logical processes. As such, Discord gateways implement a method of user-controlled guild sharding which allows for splitting events across a number of gateway connections. Guild sharding is entirely user controlled, and requires no state-sharing between separate connections to operate.",
          "To enable sharding on a connection, the user should send the shard array in the Identify payload. The first item in this array should be the zero-based integer value of the current shard, while the second represents the total number of shards. DMs will only be sent to shard 0. To calculate what events will be sent to what shard, the following formula can be used:",
          "|Sharding Formula"
        ],
        "Sharding Formula": {
          "content": [
            {
              "language": "python",
              "code": "shard_id = (guild_id >> 22) % num_shards\n"
            },
            "As an example, if you wanted to split the connection between three shards, you'd use the following values for shard for each connection: [0, 3], [1, 3], and [2, 3]. Note that only the first shard ([0, 3]) would receive DMs.",
            "Note that num_shards does not relate to, or limit, the total number of potential sessions\u2014it is only used for routing traffic. As such, sessions do not have to be identified in an evenly distributed manner when sharding. You can establish multiple sessions with the same [shard_id, num_shards], or sessions with different num_shards values. This allows you to create sessions that will handle more or less traffic than others for more fine-tuned load balancing, or orchestrate \"zero-downtime\" scaling/updating by handing off traffic to a new deployment of sessions with a higher or lower num_shards count that are prepared in parallel.",
            "|Max Concurrency"
          ],
          "Max Concurrency": {
            "content": [
              "If you have multiple shards, you may start them concurrently based on the max_concurrency value returned to you on session start. Which shards you can start concurrently are assigned based on a key for each shard. The rate limit key for a given shard can be computed with",
              {
                "language": "",
                "code": "rate_limit_key = shard_id % max_concurrency\n"
              },
              "This puts your shards into \"buckets\" of max_concurrency size. When you start your bot, you may start up to max_concurrency shards at a time, and you must start them by \"bucket\" in order. To explain another way, let's say you have 16 shards, and your max_concurrency is 16:",
              {
                "language": "",
                "code": "shard_id: 0, rate limit key (0 % 16): 0\nshard_id: 1, rate limit key (1 % 16): 1\nshard_id: 2, rate limit key (2 % 16): 2\nshard_id: 3, rate limit key (3 % 16): 3\nshard_id: 4, rate limit key (4 % 16): 4\nshard_id: 5, rate limit key (5 % 16): 5\nshard_id: 6, rate limit key (6 % 16): 6\nshard_id: 7, rate limit key (7 % 16): 7\nshard_id: 8, rate limit key (8 % 16): 8\nshard_id: 9, rate limit key (9 % 16): 9\nshard_id: 10, rate limit key (10 % 16): 10\nshard_id: 11, rate limit key (11 % 16): 11\nshard_id: 12, rate limit key (12 % 16): 12\nshard_id: 13, rate limit key (13 % 16): 13\nshard_id: 14, rate limit key (14 % 16): 14\nshard_id: 15, rate limit key (15 % 16): 15\n"
              },
              "You may start all 16 of your shards at once, because each has a rate_limit_key which fills the bucket of 16 shards. However, let's say you had 32 shards:",
              {
                "language": "",
                "code": "shard_id: 0, rate limit key (0 % 16): 0\nshard_id: 1, rate limit key (1 % 16): 1\nshard_id: 2, rate limit key (2 % 16): 2\nshard_id: 3, rate limit key (3 % 16): 3\nshard_id: 4, rate limit key (4 % 16): 4\nshard_id: 5, rate limit key (5 % 16): 5\nshard_id: 6, rate limit key (6 % 16): 6\nshard_id: 7, rate limit key (7 % 16): 7\nshard_id: 8, rate limit key (8 % 16): 8\nshard_id: 9, rate limit key (9 % 16): 9\nshard_id: 10, rate limit key (10 % 16): 10\nshard_id: 11, rate limit key (11 % 16): 11\nshard_id: 12, rate limit key (12 % 16): 12\nshard_id: 13, rate limit key (13 % 16): 13\nshard_id: 14, rate limit key (14 % 16): 14\nshard_id: 15, rate limit key (15 % 16): 15\nshard_id: 16, rate limit key (16 % 16): 0\nshard_id: 17, rate limit key (17 % 16): 1\nshard_id: 18, rate limit key (18 % 16): 2\nshard_id: 19, rate limit key (19 % 16): 3\nshard_id: 20, rate limit key (20 % 16): 4\nshard_id: 21, rate limit key (21 % 16): 5\nshard_id: 22, rate limit key (22 % 16): 6\nshard_id: 23, rate limit key (23 % 16): 7\nshard_id: 24, rate limit key (24 % 16): 8\nshard_id: 25, rate limit key (25 % 16): 9\nshard_id: 26, rate limit key (26 % 16): 10\nshard_id: 27, rate limit key (27 % 16): 11\nshard_id: 28, rate limit key (28 % 16): 12\nshard_id: 29, rate limit key (29 % 16): 13\nshard_id: 30, rate limit key (30 % 16): 14\nshard_id: 31, rate limit key (31 % 16): 15\n"
              },
              "In this case, you must start the shard buckets in \"order\". That means that you can start shard 0 -> shard 15 concurrently, and then you can start shard 16 -> shard 31."
            ]
          }
        }
      },
      "Sharding for Large Bots": {
        "content": [
          "If you own a bot that is near or in over 150,000 guilds, there are some additional considerations you must take around sharding. Discord will migrate your bot to large bot sharding when it starts to get near the large bot sharding threshold. The bot owner(s) will receive a system DM and email confirming this move has completed as well as what shard number has been assigned.",
          "The number of shards you run must be a multiple of the shard number provided when reaching out to you. If you attempt to start your bot with an invalid number of shards, your websocket connection will close with a 4010 Invalid Shard opcode.",
          "The Get Gateway Bot endpoint will always return the correct amount of shards, so if you're already using this endpoint to determine your number of shards, you shouldn't require any changes.",
          "The session start limit for these bots will also be increased from 1000 to max(2000, (guild_count / 1000) * 3) per day. You also receive an increased max_concurrency, the number of shards you can concurrently start."
        ]
      },
      "Commands and Events": {
        "content": [
          "Commands are requests made to the gateway socket by a client.",
          "|Gateway Commands",
          "|Event Names",
          "|Connecting and Resuming",
          "|Application Commands",
          "|Auto Moderation",
          "|Channels",
          "|Guilds",
          "|Guild Scheduled Event Create",
          "|Guild Scheduled Event Update",
          "|Guild Scheduled Event Delete",
          "|Guild Scheduled Event User Add",
          "|Guild Scheduled Event User Remove",
          "|Integrations",
          "|Invites",
          "|Messages",
          "|Presence",
          "|Voice",
          "|Webhooks",
          "|Interactions",
          "|Stage Instances"
        ],
        "Gateway Commands": {
          "content": [
            [
              [
                "name",
                "description"
              ],
              [
                "Identify",
                "triggers the initial handshake with the gateway"
              ],
              [
                "Resume",
                "resumes a dropped gateway connection"
              ],
              [
                "Heartbeat",
                "maintains an active gateway connection"
              ],
              [
                "Request Guild Members",
                "requests members for a guild"
              ],
              [
                "Update Voice State",
                "joins, moves, or disconnects the client from a voice channel"
              ],
              [
                "Update Presence",
                "updates a client's presence"
              ]
            ],
            "Events are payloads sent over the socket to a client that correspond to events in Discord.",
            "|Gateway Events"
          ],
          "Gateway Events": {
            "content": [
              [
                [
                  "name",
                  "description"
                ],
                [
                  "Hello",
                  "defines the heartbeat interval"
                ],
                [
                  "Ready",
                  "contains the initial state information"
                ],
                [
                  "Resumed",
                  "response to Resume"
                ],
                [
                  "Reconnect",
                  "server is going away, client should reconnect to gateway and resume"
                ],
                [
                  "Invalid Session",
                  "failure response to Identify or Resume or invalid active session"
                ],
                [
                  "Application Command Permissions Update",
                  "application command permission was updated"
                ],
                [
                  "Auto Moderation Rule Create",
                  "auto moderation rule was created"
                ],
                [
                  "Auto Moderation Rule Update",
                  "auto moderation rule was updated"
                ],
                [
                  "Auto Moderation Rule Delete",
                  "auto moderation rule was deleted"
                ],
                [
                  "Auto Moderation Action Execution",
                  "auto moderation rule was triggered and an action was executed (e.g. a message was blocked)"
                ],
                [
                  "Channel Create",
                  "new guild channel created"
                ],
                [
                  "Channel Update",
                  "channel was updated"
                ],
                [
                  "Channel Delete",
                  "channel was deleted"
                ],
                [
                  "Channel Pins Update",
                  "message was pinned or unpinned"
                ],
                [
                  "Thread Create",
                  "thread created, also sent when being added to a private thread"
                ],
                [
                  "Thread Update",
                  "thread was updated"
                ],
                [
                  "Thread Delete",
                  "thread was deleted"
                ],
                [
                  "Thread List Sync",
                  "sent when gaining access to a channel, contains all active threads in that channel"
                ],
                [
                  "Thread Member Update",
                  "thread member for the current user was updated"
                ],
                [
                  "Thread Members Update",
                  "some user(s) were added to or removed from a thread"
                ],
                [
                  "Guild Create",
                  "lazy-load for unavailable guild, guild became available, or user joined a new guild"
                ],
                [
                  "Guild Update",
                  "guild was updated"
                ],
                [
                  "Guild Delete",
                  "guild became unavailable, or user left/was removed from a guild"
                ],
                [
                  "Guild Ban Add",
                  "user was banned from a guild"
                ],
                [
                  "Guild Ban Remove",
                  "user was unbanned from a guild"
                ],
                [
                  "Guild Emojis Update",
                  "guild emojis were updated"
                ],
                [
                  "Guild Stickers Update",
                  "guild stickers were updated"
                ],
                [
                  "Guild Integrations Update",
                  "guild integration was updated"
                ],
                [
                  "Guild Member Add",
                  "new user joined a guild"
                ],
                [
                  "Guild Member Remove",
                  "user was removed from a guild"
                ],
                [
                  "Guild Member Update",
                  "guild member was updated"
                ],
                [
                  "Guild Members Chunk",
                  "response to Request Guild Members"
                ],
                [
                  "Guild Role Create",
                  "guild role was created"
                ],
                [
                  "Guild Role Update",
                  "guild role was updated"
                ],
                [
                  "Guild Role Delete",
                  "guild role was deleted"
                ],
                [
                  "Guild Scheduled Event Create",
                  "guild scheduled event was created"
                ],
                [
                  "Guild Scheduled Event Update",
                  "guild scheduled event was updated"
                ],
                [
                  "Guild Scheduled Event Delete",
                  "guild scheduled event was deleted"
                ],
                [
                  "Guild Scheduled Event User Add",
                  "user subscribed to a guild scheduled event"
                ],
                [
                  "Guild Scheduled Event User Remove",
                  "user unsubscribed from a guild scheduled event"
                ],
                [
                  "Integration Create",
                  "guild integration was created"
                ],
                [
                  "Integration Update",
                  "guild integration was updated"
                ],
                [
                  "Integration Delete",
                  "guild integration was deleted"
                ],
                [
                  "Interaction Create",
                  "user used an interaction, such as an Application Command"
                ],
                [
                  "Invite Create",
                  "invite to a channel was created"
                ],
                [
                  "Invite Delete",
                  "invite to a channel was deleted"
                ],
                [
                  "Message Create",
                  "message was created"
                ],
                [
                  "Message Update",
                  "message was edited"
                ],
                [
                  "Message Delete",
                  "message was deleted"
                ],
                [
                  "Message Delete Bulk",
                  "multiple messages were deleted at once"
                ],
                [
                  "Message Reaction Add",
                  "user reacted to a message"
                ],
                [
                  "Message Reaction Remove",
                  "user removed a reaction from a message"
                ],
                [
                  "Message Reaction Remove All",
                  "all reactions were explicitly removed from a message"
                ],
                [
                  "Message Reaction Remove Emoji",
                  "all reactions for a given emoji were explicitly removed from a message"
                ],
                [
                  "Presence Update",
                  "user was updated"
                ],
                [
                  "Stage Instance Create",
                  "stage instance was created"
                ],
                [
                  "Stage Instance Delete",
                  "stage instance was deleted or closed"
                ],
                [
                  "Stage Instance Update",
                  "stage instance was updated"
                ],
                [
                  "Typing Start",
                  "user started typing in a channel"
                ],
                [
                  "User Update",
                  "properties about the user changed"
                ],
                [
                  "Voice State Update",
                  "someone joined, left, or moved a voice channel"
                ],
                [
                  "Voice Server Update",
                  "guild's voice server was updated"
                ],
                [
                  "Webhooks Update",
                  "guild channel webhook was created, update, or deleted"
                ]
              ]
            ]
          }
        },
        "Event Names": {
          "content": [
            "Event names are in standard constant form, fully upper-cased and replacing all spaces with underscores. For instance, Channel Create would be CHANNEL_CREATE and Voice State Update would be VOICE_STATE_UPDATE. Within the following documentation, they have been left in standard English form to aid in readability.",
            "|Identify",
            "|Resume",
            "|Heartbeat",
            "|Request Guild Members",
            "|Update Voice State",
            "|Update Presence"
          ],
          "Identify": {
            "content": [
              "Used to trigger the initial handshake with the gateway.",
              "|Identify Structure"
            ],
            "Identify Structure": {
              "content": [
                [
                  [
                    "Field",
                    "Type",
                    "Description",
                    "Default"
                  ],
                  [
                    "token",
                    "string",
                    "authentication token",
                    "-"
                  ],
                  [
                    "properties",
                    "object",
                    "connection properties",
                    "-"
                  ],
                  [
                    "compress?",
                    "boolean",
                    "whether this connection supports compression of packets",
                    "false"
                  ],
                  [
                    "large_threshold?",
                    "integer",
                    "value between 50 and 250, total number of members where the gateway will stop sending offline members in the guild member list",
                    "50"
                  ],
                  [
                    "shard?",
                    "array of two integers (shard_id, num_shards)",
                    "used for Guild Sharding",
                    "-"
                  ],
                  [
                    "presence?",
                    "update presence object",
                    "presence structure for initial presence information",
                    "-"
                  ],
                  [
                    "intents",
                    "integer",
                    "the Gateway Intents you wish to receive",
                    "-"
                  ]
                ],
                "|Identify Connection Properties",
                "|Example Identify"
              ],
              "Identify Connection Properties": {
                "content": [
                  [
                    [
                      "Field",
                      "Type",
                      "Description"
                    ],
                    [
                      "os",
                      "string",
                      "your operating system"
                    ],
                    [
                      "browser",
                      "string",
                      "your library name"
                    ],
                    [
                      "device",
                      "string",
                      "your library name"
                    ]
                  ],
                  "> warn\n> These fields originally were $ prefixed (i.e: $browser) but this syntax is deprecated. While they currently still work, it is recommended to move to non-prefixed fields."
                ]
              },
              "Example Identify": {
                "content": [
                  {
                    "language": "json",
                    "code": "{\n  \"op\": 2,\n  \"d\": {\n    \"token\": \"my_token\",\n    \"properties\": {\n      \"os\": \"linux\",\n      \"browser\": \"disco\",\n      \"device\": \"disco\"\n    },\n    \"compress\": true,\n    \"large_threshold\": 250,\n    \"shard\": [0, 1],\n    \"presence\": {\n      \"activities\": [{\n        \"name\": \"Cards Against Humanity\",\n        \"type\": 0\n      }],\n      \"status\": \"dnd\",\n      \"since\": 91879201,\n      \"afk\": false\n    },\n    // This intent represents 1 << 0 for GUILDS, 1 << 1 for GUILD_MEMBERS, and 1 << 2 for GUILD_BANS\n    // This connection will only receive the events defined in those three intents\n    \"intents\": 7\n  }\n}\n"
                  }
                ]
              }
            }
          },
          "Resume": {
            "content": [
              "Used to replay missed events when a disconnected client resumes.",
              "|Resume Structure"
            ],
            "Resume Structure": {
              "content": [
                [
                  [
                    "Field",
                    "Type",
                    "Description"
                  ],
                  [
                    "token",
                    "string",
                    "session token"
                  ],
                  [
                    "session_id",
                    "string",
                    "session id"
                  ],
                  [
                    "seq",
                    "integer",
                    "last sequence number received"
                  ]
                ],
                "|Example Resume"
              ],
              "Example Resume": {
                "content": [
                  {
                    "language": "json",
                    "code": "{\n  \"op\": 6,\n  \"d\": {\n    \"token\": \"randomstring\",\n    \"session_id\": \"evenmorerandomstring\",\n    \"seq\": 1337\n  }\n}\n"
                  }
                ]
              }
            }
          },
          "Heartbeat": {
            "content": [
              "Used to maintain an active gateway connection. Must be sent every heartbeat_interval milliseconds after the Opcode 10 Hello payload is received. The inner d key is the last sequence number\u2014s\u2014received by the client. If you have not yet received one, send null.",
              "|Example Heartbeat"
            ],
            "Example Heartbeat": {
              "content": [
                {
                  "language": "",
                  "code": "{\n\t\"op\": 1,\n\t\"d\": 251\n}\n"
                }
              ]
            }
          },
          "Request Guild Members": {
            "content": [
              "Used to request all members for a guild or a list of guilds. When initially connecting, if you don't have the GUILD_PRESENCES Gateway Intent, or if the guild is over 75k members, it will only send members who are in voice, plus the member for you (the connecting user). Otherwise, if a guild has over large_threshold members (value in the Gateway Identify), it will only send members who are online, have a role, have a nickname, or are in a voice channel, and if it has under large_threshold members, it will send all members. If a client wishes to receive additional members, they need to explicitly request them via this operation. The server will send Guild Members Chunk events in response with up to 1000 members per chunk until all members that match the request have been sent.",
              "Due to our privacy and infrastructural concerns with this feature, there are some limitations that apply:",
              [
                "GUILD_PRESENCES intent is required to set presences = true. Otherwise, it will always be false",
                "GUILD_MEMBERS intent is required to request the entire member list\u2014(query=\u2018\u2019, limit=0<=n)",
                "You will be limited to requesting 1 guild_id per request",
                "Requesting a prefix (query parameter) will return a maximum of 100 members",
                "Requesting user_ids will continue to be limited to returning 100 members"
              ],
              "|Guild Request Members Structure"
            ],
            "Guild Request Members Structure": {
              "content": [
                [
                  [
                    "Field",
                    "Type",
                    "Description",
                    "Required"
                  ],
                  [
                    "guild_id",
                    "snowflake",
                    "id of the guild to get members for",
                    "true"
                  ],
                  [
                    "query?",
                    "string",
                    "string that username starts with, or an empty string to return all members",
                    "one of query or user_ids"
                  ],
                  [
                    "limit",
                    "integer",
                    "maximum number of members to send matching the query; a limit of 0 can be used with an empty string query to return all members",
                    "true when specifying query"
                  ],
                  [
                    "presences?",
                    "boolean",
                    "used to specify if we want the presences of the matched members",
                    "false"
                  ],
                  [
                    "user_ids?",
                    "snowflake or array of snowflakes",
                    "used to specify which users you wish to fetch",
                    "one of query or user_ids"
                  ],
                  [
                    "nonce?",
                    "string",
                    "nonce to identify the Guild Members Chunk response",
                    "false"
                  ]
                ],
                "> info\n> Nonce can only be up to 32 bytes. If you send an invalid nonce it will be ignored and the reply member_chunk(s) will not have a nonce set.",
                "|Guild Request Members"
              ],
              "Guild Request Members": {
                "content": [
                  {
                    "language": "json",
                    "code": "{\n  \"op\": 8,\n  \"d\": {\n    \"guild_id\": \"41771983444115456\",\n    \"query\": \"\",\n    \"limit\": 0\n  }\n}\n"
                  }
                ]
              }
            }
          },
          "Update Voice State": {
            "content": [
              "Sent when a client wants to join, move, or disconnect from a voice channel.",
              "|Gateway Voice State Update Structure"
            ],
            "Gateway Voice State Update Structure": {
              "content": [
                [
                  [
                    "Field",
                    "Type",
                    "Description"
                  ],
                  [
                    "guild_id",
                    "snowflake",
                    "id of the guild"
                  ],
                  [
                    "channel_id",
                    "?snowflake",
                    "id of the voice channel client wants to join (null if disconnecting)"
                  ],
                  [
                    "self_mute",
                    "boolean",
                    "is the client muted"
                  ],
                  [
                    "self_deaf",
                    "boolean",
                    "is the client deafened"
                  ]
                ],
                "|Example Gateway Voice State Update"
              ],
              "Example Gateway Voice State Update": {
                "content": [
                  {
                    "language": "json",
                    "code": "{\n  \"op\": 4,\n  \"d\": {\n    \"guild_id\": \"41771983423143937\",\n    \"channel_id\": \"127121515262115840\",\n    \"self_mute\": false,\n    \"self_deaf\": false\n  }\n}\n"
                  }
                ]
              }
            }
          },
          "Update Presence": {
            "content": [
              "Sent by the client to indicate a presence or status update.",
              "|Gateway Presence Update Structure"
            ],
            "Gateway Presence Update Structure": {
              "content": [
                [
                  [
                    "Field",
                    "Type",
                    "Description"
                  ],
                  [
                    "since",
                    "?integer",
                    "unix time (in milliseconds) of when the client went idle, or null if the client is not idle"
                  ],
                  [
                    "activities",
                    "array of activity objects",
                    "the user's activities"
                  ],
                  [
                    "status",
                    "string",
                    "the user's new status"
                  ],
                  [
                    "afk",
                    "boolean",
                    "whether or not the client is afk"
                  ]
                ],
                "|Status Types",
                "|Example Gateway Presence Update"
              ],
              "Status Types": {
                "content": [
                  [
                    [
                      "Status",
                      "Description"
                    ],
                    [
                      "online",
                      "Online"
                    ],
                    [
                      "dnd",
                      "Do Not Disturb"
                    ],
                    [
                      "idle",
                      "AFK"
                    ],
                    [
                      "invisible",
                      "Invisible and shown as offline"
                    ],
                    [
                      "offline",
                      "Offline"
                    ]
                  ]
                ]
              },
              "Example Gateway Presence Update": {
                "content": [
                  {
                    "language": "json",
                    "code": "{\n  \"op\": 3,\n  \"d\": {\n    \"since\": 91879201,\n    \"activities\": [{\n      \"name\": \"Save the Oxford Comma\",\n      \"type\": 0\n    }],\n    \"status\": \"online\",\n    \"afk\": false\n  }\n}\n"
                  }
                ]
              }
            }
          }
        },
        "Connecting and Resuming": {
          "content": [
            "|Hello",
            "|Ready",
            "|Resumed",
            "|Reconnect",
            "|Invalid Session"
          ],
          "Hello": {
            "content": [
              "Sent on connection to the websocket. Defines the heartbeat interval that the client should heartbeat to.",
              "|Hello Structure"
            ],
            "Hello Structure": {
              "content": [
                [
                  [
                    "Field",
                    "Type",
                    "Description"
                  ],
                  [
                    "heartbeat_interval",
                    "integer",
                    "the interval (in milliseconds) the client should heartbeat with"
                  ]
                ],
                "|Example Hello"
              ],
              "Example Hello": {
                "content": [
                  {
                    "language": "json",
                    "code": "{\n  \"op\": 10,\n  \"d\": {\n    \"heartbeat_interval\": 45000\n  }\n}\n"
                  }
                ]
              }
            }
          },
          "Ready": {
            "content": [
              "The ready event is dispatched when a client has completed the initial handshake with the gateway (for new sessions). The ready event can be the largest and most complex event the gateway will send, as it contains all the state required for a client to begin interacting with the rest of the platform.",
              "guilds are the guilds of which your bot is a member. They start out as unavailable when you connect to the gateway. As they become available, your bot will be notified via Guild Create events.",
              "|Ready Event Fields"
            ],
            "Ready Event Fields": {
              "content": [
                [
                  [
                    "Field",
                    "Type",
                    "Description"
                  ],
                  [
                    "v",
                    "integer",
                    "API version"
                  ],
                  [
                    "user",
                    "user object",
                    "information about the user including email"
                  ],
                  [
                    "guilds",
                    "array of Unavailable Guild objects",
                    "the guilds the user is in"
                  ],
                  [
                    "session_id",
                    "string",
                    "used for resuming connections"
                  ],
                  [
                    "resume_gateway_url",
                    "string",
                    "gateway url for resuming connections"
                  ],
                  [
                    "shard?",
                    "array of two integers (shard_id, num_shards)",
                    "the shard information associated with this session, if sent when identifying"
                  ],
                  [
                    "application",
                    "partial application object",
                    "contains id and flags"
                  ]
                ]
              ]
            }
          },
          "Resumed": {
            "content": [
              "The resumed event is dispatched when a client has sent a resume payload to the gateway (for resuming existing sessions)."
            ]
          },
          "Reconnect": {
            "content": [
              "The reconnect event is dispatched when a client should reconnect to the gateway (and resume their existing session, if they have one). This event usually occurs during deploys to migrate sessions gracefully off old hosts.",
              "|Example Gateway Reconnect"
            ],
            "Example Gateway Reconnect": {
              "content": [
                {
                  "language": "json",
                  "code": "{\n  \"op\": 7,\n  \"d\": null\n}\n"
                }
              ]
            }
          },
          "Invalid Session": {
            "content": [
              "Sent to indicate one of at least three different situations:",
              [
                "the gateway could not initialize a session after receiving an Opcode 2 Identify",
                "the gateway could not resume a previous session after receiving an Opcode 6 Resume",
                "the gateway has invalidated an active session and is requesting client action"
              ],
              "The inner d key is a boolean that indicates whether the session may be resumable. See Connecting and Resuming for more information.",
              "|Example Gateway Invalid Session"
            ],
            "Example Gateway Invalid Session": {
              "content": [
                {
                  "language": "json",
                  "code": "{\n  \"op\": 9,\n  \"d\": false\n}\n"
                }
              ]
            }
          }
        },
        "Application Commands": {
          "content": [
            "|Application Command Permissions Update"
          ],
          "Application Command Permissions Update": {
            "content": [
              "APPLICATION_COMMAND_PERMISSIONS_UPDATE event, sent when an application command's permissions are updated. The inner payload is an application command permissions object."
            ]
          }
        },
        "Auto Moderation": {
          "content": [
            "All auto moderation related events are currently only sent to bot users which have the MANAGE_GUILD permission.",
            "|Auto Moderation Rule Create",
            "|Auto Moderation Rule Update",
            "|Auto Moderation Rule Delete",
            "|Auto Moderation Action Execution"
          ],
          "Auto Moderation Rule Create": {
            "content": [
              "Sent when a rule is created. The inner payload is an auto moderation rule object."
            ]
          },
          "Auto Moderation Rule Update": {
            "content": [
              "Sent when a rule is updated. The inner payload is an auto moderation rule object."
            ]
          },
          "Auto Moderation Rule Delete": {
            "content": [
              "Sent when a rule is deleted. The inner payload is an auto moderation rule object."
            ]
          },
          "Auto Moderation Action Execution": {
            "content": [
              "Sent when a rule is triggered and an action is executed (e.g. when a message is blocked).",
              "|Auto Moderation Action Execution Event Fields"
            ],
            "Auto Moderation Action Execution Event Fields": {
              "content": [
                [
                  [
                    "Field",
                    "Type",
                    "Description"
                  ],
                  [
                    "guild_id",
                    "snowflake",
                    "the id of the guild in which action was executed"
                  ],
                  [
                    "action",
                    "auto moderation action object",
                    "the action which was executed"
                  ],
                  [
                    "rule_id",
                    "snowflake",
                    "the id of the rule which action belongs to"
                  ],
                  [
                    "rule_trigger_type",
                    "trigger_type",
                    "the trigger type of rule which was triggered"
                  ],
                  [
                    "user_id",
                    "snowflake",
                    "the id of the user which generated the content which triggered the rule"
                  ],
                  [
                    "channel_id?",
                    "snowflake",
                    "the id of the channel in which user content was posted"
                  ],
                  [
                    "message_id?",
                    "snowflake",
                    "the id of any user message which content belongs to *"
                  ],
                  [
                    "alert_system_message_id?",
                    "snowflake",
                    "the id of any system auto moderation messages posted as a result of this action **"
                  ],
                  [
                    "content ***",
                    "string",
                    "the user generated text content"
                  ],
                  [
                    "matched_keyword",
                    "?string",
                    "the word or phrase configured in the rule that triggered the rule"
                  ],
                  [
                    "matched_content ***",
                    "?string",
                    "the substring in content that triggered the rule"
                  ]
                ],
                "* message_id will not exist if message was blocked by automod or content was not part of any message",
                "** alert_system_message_id will not exist if this event does not correspond to an action with type SEND_ALERT_MESSAGE",
                "*** MESSAGE_CONTENT (1 << 15) gateway intent is required to receive the content and matched_content fields"
              ]
            }
          }
        },
        "Channels": {
          "content": [
            "|Channel Create",
            "|Channel Update",
            "|Channel Delete",
            "|Thread Create",
            "|Thread Update",
            "|Thread Delete",
            "|Thread List Sync",
            "|Thread Member Update",
            "|Thread Members Update",
            "|Channel Pins Update"
          ],
          "Channel Create": {
            "content": [
              "Sent when a new guild channel is created, relevant to the current user. The inner payload is a channel object."
            ]
          },
          "Channel Update": {
            "content": [
              "Sent when a channel is updated. The inner payload is a channel object. This is not sent when the field last_message_id is altered. To keep track of the last_message_id changes, you must listen for Message Create events (or Thread Create events for GUILD_FORUM channels)."
            ]
          },
          "Channel Delete": {
            "content": [
              "Sent when a channel relevant to the current user is deleted. The inner payload is a channel object."
            ]
          },
          "Thread Create": {
            "content": [
              "Sent when a thread is created, relevant to the current user, or when the current user is added to a thread. The inner payload is a channel object.",
              [
                "When a thread is created, includes an additional newly_created boolean field.",
                "When being added to an existing private thread, includes a thread member object."
              ]
            ]
          },
          "Thread Update": {
            "content": [
              "Sent when a thread is updated. The inner payload is a channel object. This is not sent when the field last_message_id is altered. To keep track of the last_message_id changes, you must listen for Message Create events."
            ]
          },
          "Thread Delete": {
            "content": [
              "Sent when a thread relevant to the current user is deleted. The inner payload is a subset of the channel object, containing just the id, guild_id, parent_id, and type fields."
            ]
          },
          "Thread List Sync": {
            "content": [
              "Sent when the current user gains access to a channel.",
              "|Thread List Sync Event Fields"
            ],
            "Thread List Sync Event Fields": {
              "content": [
                [
                  [
                    "Field",
                    "Type",
                    "Description"
                  ],
                  [
                    "guild_id",
                    "snowflake",
                    "the id of the guild"
                  ],
                  [
                    "channel_ids?",
                    "array of snowflakes",
                    "the parent channel ids whose threads are being synced.  If omitted, then threads were synced for the entire guild.  This array may contain channel_ids that have no active threads as well, so you know to clear that data."
                  ],
                  [
                    "threads",
                    "array of channel objects",
                    "all active threads in the given channels that the current user can access"
                  ],
                  [
                    "members",
                    "array of thread member objects",
                    "all thread member objects from the synced threads for the current user, indicating which threads the current user has been added to"
                  ]
                ]
              ]
            }
          },
          "Thread Member Update": {
            "content": [
              "Sent when the thread member object for the current user is updated. The inner payload is a thread member object with an extra guild_id field. This event is documented for completeness, but unlikely to be used by most bots. For bots, this event largely is just a signal that you are a member of the thread. See the threads docs for more details.",
              "|Thread Member Update Event Extra Fields"
            ],
            "Thread Member Update Event Extra Fields": {
              "content": [
                [
                  [
                    "Field",
                    "Type",
                    "Description"
                  ],
                  [
                    "guild_id",
                    "snowflake",
                    "the id of the guild"
                  ]
                ]
              ]
            }
          },
          "Thread Members Update": {
            "content": [
              "Sent when anyone is added to or removed from a thread.  If the current user does not have the GUILD_MEMBERS Gateway Intent, then this event will only be sent if the current user was added to or removed from the thread.",
              "|Thread Members Update Event Fields"
            ],
            "Thread Members Update Event Fields": {
              "content": [
                [
                  [
                    "Field",
                    "Type",
                    "Description"
                  ],
                  [
                    "id",
                    "snowflake",
                    "the id of the thread"
                  ],
                  [
                    "guild_id",
                    "snowflake",
                    "the id of the guild"
                  ],
                  [
                    "member_count",
                    "integer",
                    "the approximate number of members in the thread, capped at 50"
                  ],
                  [
                    "added_members?*",
                    "array of thread member objects",
                    "the users who were added to the thread"
                  ],
                  [
                    "removed_member_ids?",
                    "array of snowflakes",
                    "the id of the users who were removed from the thread"
                  ]
                ],
                "* In this gateway event, the thread member objects will also include the guild member and nullable presence objects for each added thread member."
              ]
            }
          },
          "Channel Pins Update": {
            "content": [
              "Sent when a message is pinned or unpinned in a text channel. This is not sent when a pinned message is deleted.",
              "|Channel Pins Update Event Fields"
            ],
            "Channel Pins Update Event Fields": {
              "content": [
                [
                  [
                    "Field",
                    "Type",
                    "Description"
                  ],
                  [
                    "guild_id?",
                    "snowflake",
                    "the id of the guild"
                  ],
                  [
                    "channel_id",
                    "snowflake",
                    "the id of the channel"
                  ],
                  [
                    "last_pin_timestamp?",
                    "?ISO8601 timestamp",
                    "the time at which the most recent pinned message was pinned"
                  ]
                ]
              ]
            }
          }
        },
        "Guilds": {
          "content": [
            "|Guild Create",
            "|Guild Update",
            "|Guild Delete",
            "|Guild Ban Add",
            "|Guild Ban Remove",
            "|Guild Emojis Update",
            "|Guild Stickers Update",
            "|Guild Integrations Update",
            "|Guild Member Add",
            "|Guild Member Remove",
            "|Guild Member Update",
            "|Guild Members Chunk",
            "|Guild Role Create",
            "|Guild Role Update",
            "|Guild Role Delete"
          ],
          "Guild Create": {
            "content": [
              "This event can be sent in three different scenarios:",
              [
                "When a user is initially connecting, to lazily load and backfill information for all unavailable guilds sent in the Ready event. Guilds that are unavailable due to an outage will send a Guild Delete event.",
                "When a Guild becomes available again to the client.",
                "When the current user joins a new Guild."
              ],
              "The inner payload is a guild object, with the following extra fields:",
              "|Guild Create Extra Fields"
            ],
            "Guild Create Extra Fields": {
              "content": [
                [
                  [
                    "Field",
                    "Type",
                    "Description"
                  ],
                  [
                    "joined_at",
                    "ISO8601 timestamp",
                    "when this guild was joined at"
                  ],
                  [
                    "large",
                    "boolean",
                    "true if this is considered a large guild"
                  ],
                  [
                    "unavailable?",
                    "boolean",
                    "true if this guild is unavailable due to an outage"
                  ],
                  [
                    "member_count",
                    "integer",
                    "total number of members in this guild"
                  ],
                  [
                    "voice_states",
                    "array of partial voice state objects",
                    "states of members currently in voice channels; lacks the guild_id key"
                  ],
                  [
                    "members",
                    "array of guild member objects",
                    "users in the guild"
                  ],
                  [
                    "channels",
                    "array of channel objects",
                    "channels in the guild"
                  ],
                  [
                    "threads",
                    "array of channel objects",
                    "all active threads in the guild that current user has permission to view"
                  ],
                  [
                    "presences",
                    "array of partial presence update objects",
                    "presences of the members in the guild, will only include non-offline members if the size is greater than large threshold"
                  ],
                  [
                    "stage_instances",
                    "array of stage instance objects",
                    "Stage instances in the guild"
                  ],
                  [
                    "guild_scheduled_events",
                    "array of guild scheduled event objects",
                    "the scheduled events in the guild"
                  ]
                ],
                "> warn\n> If your bot does not have the GUILD_PRESENCES Gateway Intent, or if the guild has over 75k members, members and presences returned in this event will only contain your bot and users in voice channels."
              ]
            }
          },
          "Guild Update": {
            "content": [
              "Sent when a guild is updated. The inner payload is a guild object."
            ]
          },
          "Guild Delete": {
            "content": [
              "Sent when a guild becomes or was already unavailable due to an outage, or when the user leaves or is removed from a guild. The inner payload is an unavailable guild object. If the unavailable field is not set, the user was removed from the guild."
            ]
          },
          "Guild Ban Add": {
            "content": [
              "Sent when a user is banned from a guild.",
              "|Guild Ban Add Event Fields"
            ],
            "Guild Ban Add Event Fields": {
              "content": [
                [
                  [
                    "Field",
                    "Type",
                    "Description"
                  ],
                  [
                    "guild_id",
                    "snowflake",
                    "id of the guild"
                  ],
                  [
                    "user",
                    "a user object",
                    "the banned user"
                  ]
                ]
              ]
            }
          },
          "Guild Ban Remove": {
            "content": [
              "Sent when a user is unbanned from a guild.",
              "|Guild Ban Remove Event Fields"
            ],
            "Guild Ban Remove Event Fields": {
              "content": [
                [
                  [
                    "Field",
                    "Type",
                    "Description"
                  ],
                  [
                    "guild_id",
                    "snowflake",
                    "id of the guild"
                  ],
                  [
                    "user",
                    "a user object",
                    "the unbanned user"
                  ]
                ]
              ]
            }
          },
          "Guild Emojis Update": {
            "content": [
              "Sent when a guild's emojis have been updated.",
              "|Guild Emojis Update Event Fields"
            ],
            "Guild Emojis Update Event Fields": {
              "content": [
                [
                  [
                    "Field",
                    "Type",
                    "Description"
                  ],
                  [
                    "guild_id",
                    "snowflake",
                    "id of the guild"
                  ],
                  [
                    "emojis",
                    "array",
                    "array of emojis"
                  ]
                ]
              ]
            }
          },
          "Guild Stickers Update": {
            "content": [
              "Sent when a guild's stickers have been updated.",
              "|Guild Stickers Update Event Fields"
            ],
            "Guild Stickers Update Event Fields": {
              "content": [
                [
                  [
                    "Field",
                    "Type",
                    "Description"
                  ],
                  [
                    "guild_id",
                    "snowflake",
                    "id of the guild"
                  ],
                  [
                    "stickers",
                    "array",
                    "array of stickers"
                  ]
                ]
              ]
            }
          },
          "Guild Integrations Update": {
            "content": [
              "Sent when a guild integration is updated.",
              "|Guild Integrations Update Event Fields"
            ],
            "Guild Integrations Update Event Fields": {
              "content": [
                [
                  [
                    "Field",
                    "Type",
                    "Description"
                  ],
                  [
                    "guild_id",
                    "snowflake",
                    "id of the guild whose integrations were updated"
                  ]
                ]
              ]
            }
          },
          "Guild Member Add": {
            "content": [
              "> warn\n> If using Gateway Intents, the GUILD_MEMBERS intent will be required to receive this event.",
              "Sent when a new user joins a guild. The inner payload is a guild member object with an extra guild_id key:",
              "|Guild Member Add Extra Fields"
            ],
            "Guild Member Add Extra Fields": {
              "content": [
                [
                  [
                    "Field",
                    "Type",
                    "Description"
                  ],
                  [
                    "guild_id",
                    "snowflake",
                    "id of the guild"
                  ]
                ]
              ]
            }
          },
          "Guild Member Remove": {
            "content": [
              "> warn\n> If using Gateway Intents, the GUILD_MEMBERS intent will be required to receive this event.",
              "Sent when a user is removed from a guild (leave/kick/ban).",
              "|Guild Member Remove Event Fields"
            ],
            "Guild Member Remove Event Fields": {
              "content": [
                [
                  [
                    "Field",
                    "Type",
                    "Description"
                  ],
                  [
                    "guild_id",
                    "snowflake",
                    "the id of the guild"
                  ],
                  [
                    "user",
                    "a user object",
                    "the user who was removed"
                  ]
                ]
              ]
            }
          },
          "Guild Member Update": {
            "content": [
              "> warn\n> If using Gateway Intents, the GUILD_MEMBERS intent will be required to receive this event.",
              "Sent when a guild member is updated. This will also fire when the user object of a guild member changes.",
              "|Guild Member Update Event Fields"
            ],
            "Guild Member Update Event Fields": {
              "content": [
                [
                  [
                    "Field",
                    "Type",
                    "Description"
                  ],
                  [
                    "guild_id",
                    "snowflake",
                    "the id of the guild"
                  ],
                  [
                    "roles",
                    "array of snowflakes",
                    "user role ids"
                  ],
                  [
                    "user",
                    "a user object",
                    "the user"
                  ],
                  [
                    "nick?",
                    "?string",
                    "nickname of the user in the guild"
                  ],
                  [
                    "avatar",
                    "?string",
                    "the member's guild avatar hash"
                  ],
                  [
                    "joined_at",
                    "?ISO8601 timestamp",
                    "when the user joined the guild"
                  ],
                  [
                    "premium_since?",
                    "?ISO8601 timestamp",
                    "when the user starting boosting the guild"
                  ],
                  [
                    "deaf?",
                    "boolean",
                    "whether the user is deafened in voice channels"
                  ],
                  [
                    "mute?",
                    "boolean",
                    "whether the user is muted in voice channels"
                  ],
                  [
                    "pending?",
                    "boolean",
                    "whether the user has not yet passed the guild's Membership Screening requirements"
                  ],
                  [
                    "communication_disabled_until?",
                    "?ISO8601 timestamp",
                    "when the user's timeout will expire and the user will be able to communicate in the guild again, null or a time in the past if the user is not timed out"
                  ]
                ]
              ]
            }
          },
          "Guild Members Chunk": {
            "content": [
              "Sent in response to Guild Request Members.\nYou can use the chunk_index and chunk_count to calculate how many chunks are left for your request.",
              "|Guild Members Chunk Event Fields"
            ],
            "Guild Members Chunk Event Fields": {
              "content": [
                [
                  [
                    "Field",
                    "Type",
                    "Description"
                  ],
                  [
                    "guild_id",
                    "snowflake",
                    "the id of the guild"
                  ],
                  [
                    "members",
                    "array of guild member objects",
                    "set of guild members"
                  ],
                  [
                    "chunk_index",
                    "integer",
                    "the chunk index in the expected chunks for this response (0 <= chunk_index < chunk_count)"
                  ],
                  [
                    "chunk_count",
                    "integer",
                    "the total number of expected chunks for this response"
                  ],
                  [
                    "not_found?",
                    "array",
                    "if passing an invalid id to REQUEST_GUILD_MEMBERS, it will be returned here"
                  ],
                  [
                    "presences?",
                    "array of presence objects",
                    "if passing true to REQUEST_GUILD_MEMBERS, presences of the returned members will be here"
                  ],
                  [
                    "nonce?",
                    "string",
                    "the nonce used in the Guild Members Request"
                  ]
                ]
              ]
            }
          },
          "Guild Role Create": {
            "content": [
              "Sent when a guild role is created.",
              "|Guild Role Create Event Fields"
            ],
            "Guild Role Create Event Fields": {
              "content": [
                [
                  [
                    "Field",
                    "Type",
                    "Description"
                  ],
                  [
                    "guild_id",
                    "snowflake",
                    "the id of the guild"
                  ],
                  [
                    "role",
                    "a role object",
                    "the role created"
                  ]
                ]
              ]
            }
          },
          "Guild Role Update": {
            "content": [
              "Sent when a guild role is updated.",
              "|Guild Role Update Event Fields"
            ],
            "Guild Role Update Event Fields": {
              "content": [
                [
                  [
                    "Field",
                    "Type",
                    "Description"
                  ],
                  [
                    "guild_id",
                    "snowflake",
                    "the id of the guild"
                  ],
                  [
                    "role",
                    "a role object",
                    "the role updated"
                  ]
                ]
              ]
            }
          },
          "Guild Role Delete": {
            "content": [
              "Sent when a guild role is deleted.",
              "|Guild Role Delete Event Fields"
            ],
            "Guild Role Delete Event Fields": {
              "content": [
                [
                  [
                    "Field",
                    "Type",
                    "Description"
                  ],
                  [
                    "guild_id",
                    "snowflake",
                    "id of the guild"
                  ],
                  [
                    "role_id",
                    "snowflake",
                    "id of the role"
                  ]
                ]
              ]
            }
          }
        },
        "Guild Scheduled Event Create": {
          "content": [
            "Sent when a guild scheduled event is created. The inner payload is a guild scheduled event object."
          ]
        },
        "Guild Scheduled Event Update": {
          "content": [
            "Sent when a guild scheduled event is updated. The inner payload is a guild scheduled event object."
          ]
        },
        "Guild Scheduled Event Delete": {
          "content": [
            "Sent when a guild scheduled event is deleted. The inner payload is a guild scheduled event object."
          ]
        },
        "Guild Scheduled Event User Add": {
          "content": [
            "Sent when a user has subscribed to a guild scheduled event.",
            "|Guild Scheduled Event User Add Event Fields"
          ],
          "Guild Scheduled Event User Add Event Fields": {
            "content": [
              [
                [
                  "Field",
                  "Type",
                  "Description"
                ],
                [
                  "guild_scheduled_event_id",
                  "snowflake",
                  "id of the guild scheduled event"
                ],
                [
                  "user_id",
                  "snowflake",
                  "id of the user"
                ],
                [
                  "guild_id",
                  "snowflake",
                  "id of the guild"
                ]
              ]
            ]
          }
        },
        "Guild Scheduled Event User Remove": {
          "content": [
            "Sent when a user has unsubscribed from a guild scheduled event.",
            "|Guild Scheduled Event User Remove Event Fields"
          ],
          "Guild Scheduled Event User Remove Event Fields": {
            "content": [
              [
                [
                  "Field",
                  "Type",
                  "Description"
                ],
                [
                  "guild_scheduled_event_id",
                  "snowflake",
                  "id of the guild scheduled event"
                ],
                [
                  "user_id",
                  "snowflake",
                  "id of the user"
                ],
                [
                  "guild_id",
                  "snowflake",
                  "id of the guild"
                ]
              ]
            ]
          }
        },
        "Integrations": {
          "content": [
            "|Integration Create",
            "|Integration Update",
            "|Integration Delete"
          ],
          "Integration Create": {
            "content": [
              "Sent when an integration is created. The inner payload is a integration object with an additional guild_id key:",
              "|Integration Create Event Additional Fields"
            ],
            "Integration Create Event Additional Fields": {
              "content": [
                [
                  [
                    "Field",
                    "Type",
                    "Description"
                  ],
                  [
                    "guild_id",
                    "snowflake",
                    "id of the guild"
                  ]
                ]
              ]
            }
          },
          "Integration Update": {
            "content": [
              "Sent when an integration is updated. The inner payload is a integration object with an additional guild_id key:",
              "|Integration Update Event Additional Fields"
            ],
            "Integration Update Event Additional Fields": {
              "content": [
                [
                  [
                    "Field",
                    "Type",
                    "Description"
                  ],
                  [
                    "guild_id",
                    "snowflake",
                    "id of the guild"
                  ]
                ]
              ]
            }
          },
          "Integration Delete": {
            "content": [
              "Sent when an integration is deleted.",
              "|Integration Delete Event Fields"
            ],
            "Integration Delete Event Fields": {
              "content": [
                [
                  [
                    "Field",
                    "Type",
                    "Description"
                  ],
                  [
                    "id",
                    "snowflake",
                    "integration id"
                  ],
                  [
                    "guild_id",
                    "snowflake",
                    "id of the guild"
                  ],
                  [
                    "application_id?",
                    "snowflake",
                    "id of the bot/OAuth2 application for this discord integration"
                  ]
                ]
              ]
            }
          }
        },
        "Invites": {
          "content": [
            "|Invite Create",
            "|Invite Delete"
          ],
          "Invite Create": {
            "content": [
              "Sent when a new invite to a channel is created.",
              "|Invite Create Event Fields"
            ],
            "Invite Create Event Fields": {
              "content": [
                [
                  [
                    "Field",
                    "Type",
                    "Description"
                  ],
                  [
                    "channel_id",
                    "snowflake",
                    "the channel the invite is for"
                  ],
                  [
                    "code",
                    "string",
                    "the unique invite code"
                  ],
                  [
                    "created_at",
                    "ISO8601 timestamp",
                    "the time at which the invite was created"
                  ],
                  [
                    "guild_id?",
                    "snowflake",
                    "the guild of the invite"
                  ],
                  [
                    "inviter?",
                    "user object",
                    "the user that created the invite"
                  ],
                  [
                    "max_age",
                    "integer",
                    "how long the invite is valid for (in seconds)"
                  ],
                  [
                    "max_uses",
                    "integer",
                    "the maximum number of times the invite can be used"
                  ],
                  [
                    "target_type?",
                    "integer",
                    "the type of target for this voice channel invite"
                  ],
                  [
                    "target_user?",
                    "user object",
                    "the user whose stream to display for this voice channel stream invite"
                  ],
                  [
                    "target_application?",
                    "partial application object",
                    "the embedded application to open for this voice channel embedded application invite"
                  ],
                  [
                    "temporary",
                    "boolean",
                    "whether or not the invite is temporary (invited users will be kicked on disconnect unless they're assigned a role)"
                  ],
                  [
                    "uses",
                    "integer",
                    "how many times the invite has been used (always will be 0)"
                  ]
                ]
              ]
            }
          },
          "Invite Delete": {
            "content": [
              "Sent when an invite is deleted.",
              "|Invite Delete Event Fields"
            ],
            "Invite Delete Event Fields": {
              "content": [
                [
                  [
                    "Field",
                    "Type",
                    "Description"
                  ],
                  [
                    "channel_id",
                    "snowflake",
                    "the channel of the invite"
                  ],
                  [
                    "guild_id?",
                    "snowflake",
                    "the guild of the invite"
                  ],
                  [
                    "code",
                    "string",
                    "the unique invite code"
                  ]
                ]
              ]
            }
          }
        },
        "Messages": {
          "content": [
            "> warn\n> Unlike persistent messages, ephemeral messages are sent directly to the user and the bot who sent the message rather than through the guild channel. Because of this, ephemeral messages are tied to the DIRECT_MESSAGES intent, and the message object won't include guild_id or member.",
            "|Message Create",
            "|Message Update",
            "|Message Delete",
            "|Message Delete Bulk",
            "|Message Reaction Add",
            "|Message Reaction Remove",
            "|Message Reaction Remove All",
            "|Message Reaction Remove Emoji"
          ],
          "Message Create": {
            "content": [
              "Sent when a message is created. The inner payload is a message object with the following extra fields:",
              "|Message Create Extra Fields"
            ],
            "Message Create Extra Fields": {
              "content": [
                [
                  [
                    "Field",
                    "Type",
                    "Description"
                  ],
                  [
                    "guild_id?",
                    "snowflake",
                    "id of the guild the message was sent in - unless it is an ephemeral message"
                  ],
                  [
                    "member?",
                    "partial guild member object",
                    "member properties for this message's author. Missing for ephemeral messages and messages from webhooks"
                  ],
                  [
                    "mentions",
                    "array of user objects, with an additional partial member field",
                    "users specifically mentioned in the message"
                  ]
                ]
              ]
            }
          },
          "Message Update": {
            "content": [
              "Sent when a message is updated. The inner payload is a message object with the same extra fields as MESSAGE_CREATE.",
              "> warn\n> Unlike creates, message updates may contain only a subset of the full message object payload (but will always contain an id and channel_id)."
            ]
          },
          "Message Delete": {
            "content": [
              "Sent when a message is deleted.",
              "|Message Delete Event Fields"
            ],
            "Message Delete Event Fields": {
              "content": [
                [
                  [
                    "Field",
                    "Type",
                    "Description"
                  ],
                  [
                    "id",
                    "snowflake",
                    "the id of the message"
                  ],
                  [
                    "channel_id",
                    "snowflake",
                    "the id of the channel"
                  ],
                  [
                    "guild_id?",
                    "snowflake",
                    "the id of the guild"
                  ]
                ]
              ]
            }
          },
          "Message Delete Bulk": {
            "content": [
              "Sent when multiple messages are deleted at once.",
              "|Message Delete Bulk Event Fields"
            ],
            "Message Delete Bulk Event Fields": {
              "content": [
                [
                  [
                    "Field",
                    "Type",
                    "Description"
                  ],
                  [
                    "ids",
                    "array of snowflakes",
                    "the ids of the messages"
                  ],
                  [
                    "channel_id",
                    "snowflake",
                    "the id of the channel"
                  ],
                  [
                    "guild_id?",
                    "snowflake",
                    "the id of the guild"
                  ]
                ]
              ]
            }
          },
          "Message Reaction Add": {
            "content": [
              "Sent when a user adds a reaction to a message.",
              "|Message Reaction Add Event Fields"
            ],
            "Message Reaction Add Event Fields": {
              "content": [
                [
                  [
                    "Field",
                    "Type",
                    "Description"
                  ],
                  [
                    "user_id",
                    "snowflake",
                    "the id of the user"
                  ],
                  [
                    "channel_id",
                    "snowflake",
                    "the id of the channel"
                  ],
                  [
                    "message_id",
                    "snowflake",
                    "the id of the message"
                  ],
                  [
                    "guild_id?",
                    "snowflake",
                    "the id of the guild"
                  ],
                  [
                    "member?",
                    "member object",
                    "the member who reacted if this happened in a guild"
                  ],
                  [
                    "emoji",
                    "a partial emoji object",
                    "the emoji used to react - example"
                  ]
                ]
              ]
            }
          },
          "Message Reaction Remove": {
            "content": [
              "Sent when a user removes a reaction from a message.",
              "|Message Reaction Remove Event Fields"
            ],
            "Message Reaction Remove Event Fields": {
              "content": [
                [
                  [
                    "Field",
                    "Type",
                    "Description"
                  ],
                  [
                    "user_id",
                    "snowflake",
                    "the id of the user"
                  ],
                  [
                    "channel_id",
                    "snowflake",
                    "the id of the channel"
                  ],
                  [
                    "message_id",
                    "snowflake",
                    "the id of the message"
                  ],
                  [
                    "guild_id?",
                    "snowflake",
                    "the id of the guild"
                  ],
                  [
                    "emoji",
                    "a partial emoji object",
                    "the emoji used to react - example"
                  ]
                ]
              ]
            }
          },
          "Message Reaction Remove All": {
            "content": [
              "Sent when a user explicitly removes all reactions from a message.",
              "|Message Reaction Remove All Event Fields"
            ],
            "Message Reaction Remove All Event Fields": {
              "content": [
                [
                  [
                    "Field",
                    "Type",
                    "Description"
                  ],
                  [
                    "channel_id",
                    "snowflake",
                    "the id of the channel"
                  ],
                  [
                    "message_id",
                    "snowflake",
                    "the id of the message"
                  ],
                  [
                    "guild_id?",
                    "snowflake",
                    "the id of the guild"
                  ]
                ]
              ]
            }
          },
          "Message Reaction Remove Emoji": {
            "content": [
              "Sent when a bot removes all instances of a given emoji from the reactions of a message.",
              "|Message Reaction Remove Emoji Event Fields"
            ],
            "Message Reaction Remove Emoji Event Fields": {
              "content": [
                [
                  [
                    "Field",
                    "Type",
                    "Description"
                  ],
                  [
                    "channel_id",
                    "snowflake",
                    "the id of the channel"
                  ],
                  [
                    "guild_id?",
                    "snowflake",
                    "the id of the guild"
                  ],
                  [
                    "message_id",
                    "snowflake",
                    "the id of the message"
                  ],
                  [
                    "emoji",
                    "partial emoji object",
                    "the emoji that was removed"
                  ]
                ]
              ]
            }
          }
        },
        "Presence": {
          "content": [
            "|Presence Update",
            "|Client Status Object",
            "|Activity Object",
            "|Typing Start",
            "|User Update"
          ],
          "Presence Update": {
            "content": [
              "> warn\n> If you are using Gateway Intents, you must specify the GUILD_PRESENCES intent in order to receive Presence Update events",
              "A user's presence is their current state on a guild. This event is sent when a user's presence or info, such as name or avatar, is updated.",
              "> warn\n> The user object within this event can be partial, the only field which must be sent is the id field, everything else is optional. Along with this limitation, no fields are required, and the types of the fields are not validated. Your client should expect any combination of fields and types within this event.",
              "|Presence Update Event Fields"
            ],
            "Presence Update Event Fields": {
              "content": [
                [
                  [
                    "Field",
                    "Type",
                    "Description"
                  ],
                  [
                    "user",
                    "user object",
                    "the user presence is being updated for"
                  ],
                  [
                    "guild_id",
                    "snowflake",
                    "id of the guild"
                  ],
                  [
                    "status",
                    "string",
                    "either \"idle\", \"dnd\", \"online\", or \"offline\""
                  ],
                  [
                    "activities",
                    "array of activity objects",
                    "user's current activities"
                  ],
                  [
                    "client_status",
                    "client_status object",
                    "user's platform-dependent status"
                  ]
                ]
              ]
            }
          },
          "Client Status Object": {
            "content": [
              "Active sessions are indicated with an \"online\", \"idle\", or \"dnd\" string per platform. If a user is offline or invisible, the corresponding field is not present.",
              [
                [
                  "Field",
                  "Type",
                  "Description"
                ],
                [
                  "desktop?",
                  "string",
                  "the user's status set for an active desktop (Windows, Linux, Mac) application session"
                ],
                [
                  "mobile?",
                  "string",
                  "the user's status set for an active mobile (iOS, Android) application session"
                ],
                [
                  "web?",
                  "string",
                  "the user's status set for an active web (browser, bot account) application session"
                ]
              ]
            ]
          },
          "Activity Object": {
            "content": [
              "|Activity Structure"
            ],
            "Activity Structure": {
              "content": [
                [
                  [
                    "Field",
                    "Type",
                    "Description"
                  ],
                  [
                    "name",
                    "string",
                    "the activity's name"
                  ],
                  [
                    "type",
                    "integer",
                    "activity type"
                  ],
                  [
                    "url?",
                    "?string",
                    "stream url, is validated when type is 1"
                  ],
                  [
                    "created_at",
                    "integer",
                    "unix timestamp (in milliseconds) of when the activity was added to the user's session"
                  ],
                  [
                    "timestamps?",
                    "timestamps object",
                    "unix timestamps for start and/or end of the game"
                  ],
                  [
                    "application_id?",
                    "snowflake",
                    "application id for the game"
                  ],
                  [
                    "details?",
                    "?string",
                    "what the player is currently doing"
                  ],
                  [
                    "state?",
                    "?string",
                    "the user's current party status"
                  ],
                  [
                    "emoji?",
                    "?emoji object",
                    "the emoji used for a custom status"
                  ],
                  [
                    "party?",
                    "party object",
                    "information for the current party of the player"
                  ],
                  [
                    "assets?",
                    "assets object",
                    "images for the presence and their hover texts"
                  ],
                  [
                    "secrets?",
                    "secrets object",
                    "secrets for Rich Presence joining and spectating"
                  ],
                  [
                    "instance?",
                    "boolean",
                    "whether or not the activity is an instanced game session"
                  ],
                  [
                    "flags?",
                    "integer",
                    "activity flags ORd together, describes what the payload includes"
                  ],
                  [
                    "buttons?",
                    "array of buttons",
                    "the custom buttons shown in the Rich Presence (max 2)"
                  ]
                ],
                "> info\n> Bots are only able to send name, type, and optionally url.",
                "|Activity Types",
                "|Activity Timestamps",
                "|Activity Emoji",
                "|Activity Party",
                "|Activity Assets",
                "|Activity Asset Image",
                "|Activity Secrets",
                "|Activity Flags",
                "|Activity Buttons",
                "|Example Activity",
                "|Example Activity with Rich Presence"
              ],
              "Activity Types": {
                "content": [
                  [
                    [
                      "ID",
                      "Name",
                      "Format",
                      "Example"
                    ],
                    [
                      "0",
                      "Game",
                      "Playing {name}",
                      "\"Playing Rocket League\""
                    ],
                    [
                      "1",
                      "Streaming",
                      "Streaming {details}",
                      "\"Streaming Rocket League\""
                    ],
                    [
                      "2",
                      "Listening",
                      "Listening to {name}",
                      "\"Listening to Spotify\""
                    ],
                    [
                      "3",
                      "Watching",
                      "Watching {name}",
                      "\"Watching YouTube Together\""
                    ],
                    [
                      "4",
                      "Custom",
                      "{emoji} {name}",
                      "\":smiley: I am cool\""
                    ],
                    [
                      "5",
                      "Competing",
                      "Competing in {name}",
                      "\"Competing in Arena World Champions\""
                    ]
                  ],
                  "> info\n> The streaming type currently only supports Twitch and YouTube. Only https://twitch.tv/ and https://youtube.com/ urls will work."
                ]
              },
              "Activity Timestamps": {
                "content": [
                  [
                    [
                      "Field",
                      "Type",
                      "Description"
                    ],
                    [
                      "start?",
                      "integer",
                      "unix time (in milliseconds) of when the activity started"
                    ],
                    [
                      "end?",
                      "integer",
                      "unix time (in milliseconds) of when the activity ends"
                    ]
                  ]
                ]
              },
              "Activity Emoji": {
                "content": [
                  [
                    [
                      "Field",
                      "Type",
                      "Description"
                    ],
                    [
                      "name",
                      "string",
                      "the name of the emoji"
                    ],
                    [
                      "id?",
                      "snowflake",
                      "the id of the emoji"
                    ],
                    [
                      "animated?",
                      "boolean",
                      "whether this emoji is animated"
                    ]
                  ]
                ]
              },
              "Activity Party": {
                "content": [
                  [
                    [
                      "Field",
                      "Type",
                      "Description"
                    ],
                    [
                      "id?",
                      "string",
                      "the id of the party"
                    ],
                    [
                      "size?",
                      "array of two integers (current_size, max_size)",
                      "used to show the party's current and maximum size"
                    ]
                  ]
                ]
              },
              "Activity Assets": {
                "content": [
                  [
                    [
                      "Field",
                      "Type",
                      "Description"
                    ],
                    [
                      "large_image?",
                      "string",
                      "see Activity Asset Image"
                    ],
                    [
                      "large_text?",
                      "string",
                      "text displayed when hovering over the large image of the activity"
                    ],
                    [
                      "small_image?",
                      "string",
                      "see Activity Asset Image"
                    ],
                    [
                      "small_text?",
                      "string",
                      "text displayed when hovering over the small image of the activity"
                    ]
                  ]
                ]
              },
              "Activity Asset Image": {
                "content": [
                  "Activity asset images are arbitrary strings which usually contain snowflake IDs or prefixed image IDs. Treat data within this field carefully, as it is user-specifiable and not sanitized.",
                  "To use an external image via media proxy, specify the URL as the field's value when sending. You will only receive the mp: prefix via the gateway.",
                  [
                    [
                      "Type",
                      "Format",
                      "Image URL"
                    ],
                    [
                      "Application Asset",
                      "{application_asset_id}",
                      "see Application Asset Image Formatting"
                    ],
                    [
                      "Media Proxy Image",
                      "mp:{image_id}",
                      "https://media.discordapp.net/{image_id}"
                    ]
                  ]
                ]
              },
              "Activity Secrets": {
                "content": [
                  [
                    [
                      "Field",
                      "Type",
                      "Description"
                    ],
                    [
                      "join?",
                      "string",
                      "the secret for joining a party"
                    ],
                    [
                      "spectate?",
                      "string",
                      "the secret for spectating a game"
                    ],
                    [
                      "match?",
                      "string",
                      "the secret for a specific instanced match"
                    ]
                  ]
                ]
              },
              "Activity Flags": {
                "content": [
                  [
                    [
                      "Name",
                      "Value"
                    ],
                    [
                      "INSTANCE",
                      "1 << 0"
                    ],
                    [
                      "JOIN",
                      "1 << 1"
                    ],
                    [
                      "SPECTATE",
                      "1 << 2"
                    ],
                    [
                      "JOIN_REQUEST",
                      "1 << 3"
                    ],
                    [
                      "SYNC",
                      "1 << 4"
                    ],
                    [
                      "PLAY",
                      "1 << 5"
                    ],
                    [
                      "PARTY_PRIVACY_FRIENDS",
                      "1 << 6"
                    ],
                    [
                      "PARTY_PRIVACY_VOICE_CHANNEL",
                      "1 << 7"
                    ],
                    [
                      "EMBEDDED",
                      "1 << 8"
                    ]
                  ]
                ]
              },
              "Activity Buttons": {
                "content": [
                  "When received over the gateway, the buttons field is an array of strings, which are the button labels. Bots cannot access a user's activity button URLs. When sending, the buttons field must be an array of the below object:",
                  [
                    [
                      "Field",
                      "Type",
                      "Description"
                    ],
                    [
                      "label",
                      "string",
                      "the text shown on the button (1-32 characters)"
                    ],
                    [
                      "url",
                      "string",
                      "the url opened when clicking the button (1-512 characters)"
                    ]
                  ]
                ]
              },
              "Example Activity": {
                "content": [
                  {
                    "language": "json",
                    "code": "{\n  \"details\": \"24H RL Stream for Charity\",\n  \"state\": \"Rocket League\",\n  \"name\": \"Twitch\",\n  \"type\": 1,\n  \"url\": \"https://www.twitch.tv/discord\"\n}\n"
                  }
                ]
              },
              "Example Activity with Rich Presence": {
                "content": [
                  {
                    "language": "json",
                    "code": "{\n  \"name\": \"Rocket League\",\n  \"type\": 0,\n  \"application_id\": \"379286085710381999\",\n  \"state\": \"In a Match\",\n  \"details\": \"Ranked Duos: 2-1\",\n  \"timestamps\": {\n    \"start\": 15112000660000\n  },\n  \"party\": {\n    \"id\": \"9dd6594e-81b3-49f6-a6b5-a679e6a060d3\",\n    \"size\": [2, 2]\n  },\n  \"assets\": {\n    \"large_image\": \"351371005538729000\",\n    \"large_text\": \"DFH Stadium\",\n    \"small_image\": \"351371005538729111\",\n    \"small_text\": \"Silver III\"\n  },\n  \"secrets\": {\n    \"join\": \"025ed05c71f639de8bfaa0d679d7c94b2fdce12f\",\n    \"spectate\": \"e7eb30d2ee025ed05c71ea495f770b76454ee4e0\",\n    \"match\": \"4b2fdce12f639de8bfa7e3591b71a0d679d7c93f\"\n  }\n}\n"
                  },
                  "> warn\n> Clients may only update their game status 5 times per 20 seconds."
                ]
              }
            }
          },
          "Typing Start": {
            "content": [
              "Sent when a user starts typing in a channel.",
              "|Typing Start Event Fields"
            ],
            "Typing Start Event Fields": {
              "content": [
                [
                  [
                    "Field",
                    "Type",
                    "Description"
                  ],
                  [
                    "channel_id",
                    "snowflake",
                    "id of the channel"
                  ],
                  [
                    "guild_id?",
                    "snowflake",
                    "id of the guild"
                  ],
                  [
                    "user_id",
                    "snowflake",
                    "id of the user"
                  ],
                  [
                    "timestamp",
                    "integer",
                    "unix time (in seconds) of when the user started typing"
                  ],
                  [
                    "member?",
                    "member object",
                    "the member who started typing if this happened in a guild"
                  ]
                ]
              ]
            }
          },
          "User Update": {
            "content": [
              "Sent when properties about the user change. Inner payload is a user object."
            ]
          }
        },
        "Voice": {
          "content": [
            "|Voice State Update",
            "|Voice Server Update"
          ],
          "Voice State Update": {
            "content": [
              "Sent when someone joins/leaves/moves voice channels. Inner payload is a voice state object."
            ]
          },
          "Voice Server Update": {
            "content": [
              "Sent when a guild's voice server is updated. This is sent when initially connecting to voice, and when the current voice instance fails over to a new server.",
              "> warn\n> A null endpoint means that the voice server allocated has gone away and is trying to be reallocated. You should attempt to disconnect from the currently connected voice server, and not attempt to reconnect until a new voice server is allocated.",
              "|Voice Server Update Event Fields"
            ],
            "Voice Server Update Event Fields": {
              "content": [
                [
                  [
                    "Field",
                    "Type",
                    "Description"
                  ],
                  [
                    "token",
                    "string",
                    "voice connection token"
                  ],
                  [
                    "guild_id",
                    "snowflake",
                    "the guild this voice server update is for"
                  ],
                  [
                    "endpoint",
                    "?string",
                    "the voice server host"
                  ]
                ],
                "|Example Voice Server Update Payload"
              ],
              "Example Voice Server Update Payload": {
                "content": [
                  {
                    "language": "json",
                    "code": "{\n  \"token\": \"my_token\",\n  \"guild_id\": \"41771983423143937\",\n  \"endpoint\": \"smart.loyal.discord.gg\"\n}\n"
                  }
                ]
              }
            }
          }
        },
        "Webhooks": {
          "content": [
            "|Webhooks Update"
          ],
          "Webhooks Update": {
            "content": [
              "Sent when a guild channel's webhook is created, updated, or deleted.",
              "|Webhooks Update Event Fields"
            ],
            "Webhooks Update Event Fields": {
              "content": [
                [
                  [
                    "Field",
                    "Type",
                    "Description"
                  ],
                  [
                    "guild_id",
                    "snowflake",
                    "id of the guild"
                  ],
                  [
                    "channel_id",
                    "snowflake",
                    "id of the channel"
                  ]
                ]
              ]
            }
          }
        },
        "Interactions": {
          "content": [
            "|Interaction Create"
          ],
          "Interaction Create": {
            "content": [
              "Sent when a user in a guild uses an Application Command. Inner payload is an Interaction."
            ]
          }
        },
        "Stage Instances": {
          "content": [
            "|Stage Instance Create",
            "|Stage Instance Update",
            "|Stage Instance Delete"
          ],
          "Stage Instance Create": {
            "content": [
              "Sent when a Stage instance is created (i.e. the Stage is now \"live\"). Inner payload is a Stage instance"
            ]
          },
          "Stage Instance Update": {
            "content": [
              "Sent when a Stage instance has been updated. Inner payload is a Stage instance"
            ]
          },
          "Stage Instance Delete": {
            "content": [
              "Sent when a Stage instance has been deleted (i.e. the Stage has been closed). Inner payload is a Stage instance"
            ]
          }
        }
      },
      "Get Gateway % GET /gateway": {
        "content": [
          "> info\n> This endpoint does not require authentication.",
          "Returns an object with a single valid WSS URL, which the client can use for Connecting. Clients should cache this value and only call this endpoint to retrieve a new URL if they are unable to properly establish a connection using the cached version of the URL.",
          "|Example Response"
        ],
        "Example Response": {
          "content": [
            {
              "language": "json",
              "code": "{\n  \"url\": \"wss://gateway.discord.gg/\"\n}\n"
            }
          ]
        }
      },
      "Get Gateway Bot % GET /gateway/bot": {
        "content": [
          "> warn\n> This endpoint requires authentication using a valid bot token.",
          "Returns an object based on the information in Get Gateway, plus additional metadata that can help during the operation of large or sharded bots. Unlike the Get Gateway, this route should not be cached for extended periods of time as the value is not guaranteed to be the same per-call, and changes as the bot joins/leaves guilds.",
          "|JSON Response"
        ],
        "JSON Response": {
          "content": [
            [
              [
                "Field",
                "Type",
                "Description"
              ],
              [
                "url",
                "string",
                "The WSS URL that can be used for connecting to the gateway"
              ],
              [
                "shards",
                "integer",
                "The recommended number of shards to use when connecting"
              ],
              [
                "session_start_limit",
                "session_start_limit object",
                "Information on the current session start limit"
              ]
            ],
            "|Example Response"
          ],
          "Example Response": {
            "content": [
              {
                "language": "json",
                "code": "{\n  \"url\": \"wss://gateway.discord.gg/\",\n  \"shards\": 9,\n  \"session_start_limit\": {\n    \"total\": 1000,\n    \"remaining\": 999,\n    \"reset_after\": 14400000,\n    \"max_concurrency\": 1\n  }\n}\n"
              }
            ]
          }
        }
      },
      "Session Start Limit Object": {
        "content": [
          "|Session Start Limit Structure"
        ],
        "Session Start Limit Structure": {
          "content": [
            [
              [
                "Field",
                "Type",
                "Description"
              ],
              [
                "total",
                "integer",
                "The total number of session starts the current user is allowed"
              ],
              [
                "remaining",
                "integer",
                "The remaining number of session starts the current user is allowed"
              ],
              [
                "reset_after",
                "integer",
                "The number of milliseconds after which the limit resets"
              ],
              [
                "max_concurrency",
                "integer",
                "The number of identify requests allowed per 5 seconds"
              ]
            ]
          ]
        }
      }
    }
  }
}