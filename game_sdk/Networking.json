{
  "content": [
    "|Networking"
  ],
  "Networking": {
    "level": 1,
    "url": "https://discord.com/developers/docs/game_sdk/networking#networking",
    "content": [
      "> info\n> Need help with the SDK? Talk to us in the Discord Developers Server!",
      "> danger\n> Selling SKUs on Discord has now been discontinued as of March 1, 2022. Read here for more info.",
      "A note before starting: this documentation covers the \"low layer\" networking level of the Discord GameSDK. What that means is that using the network manager directly affords you the flexibility to update routes, open channels, and handle events directly emitted by the SDK. If you're looking for something a bit easier and faster to integrate, we recommend that you check out the networking wrapper around our lobby documentation: Integrated Networking",
      "Need a networking layer? Have a networking layer! This manager handles all things packets so you can get data from player to player and make your multiplayer...work. It:",
      [
        "Functions as a connection-oriented, TCP-like API, but over UDP!",
        "Supports \"reliable\" and \"unreliable\" connectionsPackets with loot in them always get there, but player positioning can be eventually consistent",
        "Features P2P-like connections, but routed through Discord's high-end server infrastructureAll the benefits of direct connections, without the IP leaks!",
        "Is encrypted!"
      ],
      "An important note to make here is that our networking layer is not peer-to-peer. Discord has always promised that we will not leak your IP, and we promise to keep it that way. Though it seems like you are connected directly to another user, it routes through Discord's servers in the middle, ensuring both security and robust networking thanks to our servers.",
      "|GetPeerId",
      "|Flush",
      "|OpenChannel",
      "|OpenPeer",
      "|UpdatePeer",
      "|SendMessage",
      "|CloseChannel",
      "|ClosePeer",
      "|OnMessage",
      "|OnRouteUpdate",
      "|Flush vs RunCallbacks",
      "|Connecting to Each Other",
      "|Example: Connecting to Another Player in a Lobby"
    ],
    "GetPeerId": {
      "level": 2,
      "url": "https://discord.com/developers/docs/game_sdk/networking#getpeerid",
      "content": [
        "Get the networking peer ID for the current user, allowing other users to send packets to them.",
        "Returns a UInt64.",
        "|Parameters",
        "|Example"
      ],
      "Parameters": {
        "level": 6,
        "url": "https://discord.com/developers/docs/game_sdk/networking#getpeerid-parameters",
        "content": [
          "None"
        ]
      },
      "Example": {
        "level": 6,
        "url": "https://discord.com/developers/docs/game_sdk/networking#getpeerid-example",
        "content": [
          {
            "language": "cs",
            "code": "var myPeerId = networkManager.GetPeerId();\n"
          }
        ]
      }
    },
    "Flush": {
      "level": 2,
      "url": "https://discord.com/developers/docs/game_sdk/networking#flush",
      "content": [
        "Flushes the network. Run this at the end of your game's loop, once you've finished sending all you need to send. In Unity, for example, stick this in LateUpdate().",
        "Returns void.",
        "|Parameters",
        "|Example"
      ],
      "Parameters": {
        "level": 6,
        "url": "https://discord.com/developers/docs/game_sdk/networking#flush-parameters",
        "content": [
          "None"
        ]
      },
      "Example": {
        "level": 6,
        "url": "https://discord.com/developers/docs/game_sdk/networking#flush-example",
        "content": [
          {
            "language": "cs",
            "code": "void LateUpdate()\n{\n  networkManager.Flush();\n}\n"
          }
        ]
      }
    },
    "OpenChannel": {
      "level": 2,
      "url": "https://discord.com/developers/docs/game_sdk/networking#openchannel",
      "content": [
        "Opens a channel to a user with their given peer ID on the given channel number.",
        "Unreliable channels\u2014reliable = false\u2014should be used for loss-tolerant data, like player positioning in the world. Reliable channels\u2014reliable = true\u2014should be used for data that must get to the user, like loot drops!",
        "Returns void.",
        "|Parameters",
        "|Example"
      ],
      "Parameters": {
        "level": 6,
        "url": "https://discord.com/developers/docs/game_sdk/networking#openchannel-parameters",
        "content": [
          [
            [
              "name",
              "type",
              "description"
            ],
            [
              "peerId",
              "UInt64",
              "the peerId of the user to connect to"
            ],
            [
              "channelId",
              "byte",
              "the channel on which to connect"
            ],
            [
              "reliable",
              "bool",
              "whether the channel should be unreliable or reliable"
            ]
          ]
        ]
      },
      "Example": {
        "level": 6,
        "url": "https://discord.com/developers/docs/game_sdk/networking#openchannel-example",
        "content": [
          {
            "language": "cs",
            "code": "var userId = 53908232506183680;\nvar lobbyId = 290926798626357250;\n\nvar rawPeerId = lobbyManager.GetMemberMetadataValue(lobbyId, userId, \"metadata.peer_id\");\n// Metadata is stored as a string, so we need to make it an integer for OpenChannel\nvar peerId = System.Convert.ToUInt64(rawPeerId);\nnetworkManager.OpenChannel(peerId, 0, false);\n"
          }
        ]
      }
    },
    "OpenPeer": {
      "level": 2,
      "url": "https://discord.com/developers/docs/game_sdk/networking#openpeer",
      "content": [
        "Opens a network connection to another Discord user.",
        "Returns void.",
        "|Parameters",
        "|Example"
      ],
      "Parameters": {
        "level": 6,
        "url": "https://discord.com/developers/docs/game_sdk/networking#openpeer-parameters",
        "content": [
          [
            [
              "name",
              "type",
              "description"
            ],
            [
              "peerId",
              "UInt64",
              "the peerId of the user to connect to"
            ],
            [
              "route",
              "string",
              "the route the user is currently broadcasting"
            ]
          ]
        ]
      },
      "Example": {
        "level": 6,
        "url": "https://discord.com/developers/docs/game_sdk/networking#openpeer-example",
        "content": [
          {
            "language": "cs",
            "code": "var userId = 53908232506183680;\nvar lobbyId = 290926798626357250;\n\nvar rawPeerId = lobbyManager.GetMemberMetadataValue(lobbyId, userId, \"metadata.peer_id\");\n// Metadata is stored as a string, so we need to make it an integer for OpenChannel\nvar peerId = System.Convert.ToUInt64(rawPeerId);\nvar route = lobbyManager.GetMemberMetadataValue(lobbyId, userId, \"metadata.route\");\nnetworkManager.OpenPeer(peerId, route);\n"
          }
        ]
      }
    },
    "UpdatePeer": {
      "level": 2,
      "url": "https://discord.com/developers/docs/game_sdk/networking#updatepeer",
      "content": [
        "Updates the network connection to another Discord user. You'll want to call this when notified that the route for a user to which you are connected has changed, most likely from a lobby member update event.",
        "Returns void.",
        "|Parameters",
        "|Example"
      ],
      "Parameters": {
        "level": 6,
        "url": "https://discord.com/developers/docs/game_sdk/networking#updatepeer-parameters",
        "content": [
          [
            [
              "name",
              "type",
              "description"
            ],
            [
              "peerId",
              "UInt64",
              "the user's peerId"
            ],
            [
              "route",
              "string",
              "the new route for the user"
            ]
          ]
        ]
      },
      "Example": {
        "level": 6,
        "url": "https://discord.com/developers/docs/game_sdk/networking#updatepeer-example",
        "content": [
          {
            "language": "cs",
            "code": "lobbyManager.OnMemberUpdate += (lobbyId, userId) =>\n{\n  var rawPeerId = lobbyManager.GetMemberMetadataValue(lobbyId, userId, \"metadata.peer_id\");\n  // Metadata is stored as a string, so we need to make it an integer for OpenChannel\n  var peerId = System.Convert.ToUInt64(rawPeerId);\n  var newRoute = lobbyManager.GetMemberMetadataValue(lobbyId, userId, \"metadata.route\");\n  networkManager.UpdatePeer(peerId, newRoute);\n}\n"
          }
        ]
      }
    },
    "SendMessage": {
      "level": 2,
      "url": "https://discord.com/developers/docs/game_sdk/networking#sendmessage",
      "content": [
        "Sends data to a given peer ID through the given channel.",
        "Returns void.",
        "|Parameters",
        "|Example"
      ],
      "Parameters": {
        "level": 6,
        "url": "https://discord.com/developers/docs/game_sdk/networking#sendmessage-parameters",
        "content": [
          [
            [
              "name",
              "type",
              "description"
            ],
            [
              "peerId",
              "UInt64",
              "the peer id to connect to"
            ],
            [
              "channelId",
              "byte",
              "the channel on which to connect"
            ],
            [
              "data",
              "byte[]",
              "the data to send"
            ]
          ]
        ]
      },
      "Example": {
        "level": 6,
        "url": "https://discord.com/developers/docs/game_sdk/networking#sendmessage-example",
        "content": [
          {
            "language": "cs",
            "code": "var userId = 53908232506183680;\nvar lobbyId = 290926798626357250;\nvar rawPeerId = lobbyManager.GetMemberMetadataValue(lobbyId, userId, \"metadata.peer_id\");\n// Metadata is stored as a string, so we need to make it an integer for OpenChannel\nvar peerId = System.Convert.ToUInt64(rawPeerId);\n\nbyte[] lootDrops = GameEngine.GetLootData();\nnetworkManager.SendMessage(peerId, 1, lootDrops);\n"
          }
        ]
      }
    },
    "CloseChannel": {
      "level": 2,
      "url": "https://discord.com/developers/docs/game_sdk/networking#closechannel",
      "content": [
        "Close the connection to a given user by peerId on the given channel.",
        "Returns void.",
        "|Parameters",
        "|Example"
      ],
      "Parameters": {
        "level": 6,
        "url": "https://discord.com/developers/docs/game_sdk/networking#closechannel-parameters",
        "content": [
          [
            [
              "name",
              "type",
              "description"
            ],
            [
              "peerId",
              "UInt64",
              "the peerId of the user to disconnect from"
            ],
            [
              "channelId",
              "byte",
              "the route to close"
            ]
          ]
        ]
      },
      "Example": {
        "level": 6,
        "url": "https://discord.com/developers/docs/game_sdk/networking#closechannel-example",
        "content": [
          {
            "language": "cs",
            "code": "var userId = 53908232506183680;\nvar lobbyId = 290926798626357250;\n\nvar rawPeerId = lobbyManager.GetMemberMetadataValue(lobbyId, userId, \"metadata.peer_id\");\n// Metadata is stored as a string, so we need to make it an integer for OpenChannel\nvar peerId = System.Convert.ToUInt64(rawPeerId);\nnetworkManager.CloseChannel(peerId, 0);\nConsole.WriteLine(\"Channel {0} to {1} closed\", 0, peerId);\n"
          }
        ]
      }
    },
    "ClosePeer": {
      "level": 2,
      "url": "https://discord.com/developers/docs/game_sdk/networking#closepeer",
      "content": [
        "Disconnects the network session to another Discord user.",
        "Returns void.",
        "|Parameters",
        "|Example"
      ],
      "Parameters": {
        "level": 6,
        "url": "https://discord.com/developers/docs/game_sdk/networking#closepeer-parameters",
        "content": [
          [
            [
              "name",
              "type",
              "description"
            ],
            [
              "peerId",
              "UInt64",
              "the user's peerId"
            ]
          ]
        ]
      },
      "Example": {
        "level": 6,
        "url": "https://discord.com/developers/docs/game_sdk/networking#closepeer-example",
        "content": [
          {
            "language": "cs",
            "code": "var userId = 53908232506183680;\nvar lobbyId = 290926798626357250;\n\nvar rawPeerId = lobbyManager.GetMemberMetadataValue(lobbyId, userId, \"metadata.peer_id\");\n// Metadata is stored as a string, so we need to make it an integer for OpenChannel\nvar peerId = System.Convert.ToUInt64(rawPeerId);\nnetworkManager.ClosePeer(peerId);\nConsole.WriteLine(\"Connection to {0} closed\", peerId);\n"
          }
        ]
      }
    },
    "OnMessage": {
      "level": 2,
      "url": "https://discord.com/developers/docs/game_sdk/networking#onmessage",
      "content": [
        "Fires when you receive data from another user. This callback will only fire if you already have an open channel with the user sending you data. Make sure you're running RunCallbacks() in your game loop, or you'll never get data!",
        "|Parameters",
        "|Example"
      ],
      "Parameters": {
        "level": 6,
        "url": "https://discord.com/developers/docs/game_sdk/networking#onmessage-parameters",
        "content": [
          [
            [
              "name",
              "type",
              "description"
            ],
            [
              "peerId",
              "UInt64",
              "the peer id of the sender"
            ],
            [
              "channelId",
              "byte",
              "the channel it was sent on"
            ],
            [
              "data",
              "byte[]",
              "the data sent"
            ]
          ]
        ]
      },
      "Example": {
        "level": 6,
        "url": "https://discord.com/developers/docs/game_sdk/networking#onmessage-example",
        "content": [
          {
            "language": "cs",
            "code": "networkManager.OnMessage += (peerId, channel, data) =>\n{\n  var stringData = Encoding.UTF8.GetString(data);\n  Console.WriteLine(\"Message from {0}: {1}\", peerId, stringData)\n}\n"
          }
        ]
      }
    },
    "OnRouteUpdate": {
      "level": 2,
      "url": "https://discord.com/developers/docs/game_sdk/networking#onrouteupdate",
      "content": [
        "Fires when your networking route has changed. You should broadcast to other users to whom you are connected that this has changed, probably by updating your lobby member metadata for others to receive.",
        "|Parameters",
        "|Example"
      ],
      "Parameters": {
        "level": 6,
        "url": "https://discord.com/developers/docs/game_sdk/networking#onrouteupdate-parameters",
        "content": [
          [
            [
              "name",
              "type",
              "description"
            ],
            [
              "route",
              "string",
              "the new route to the user"
            ]
          ]
        ]
      },
      "Example": {
        "level": 6,
        "url": "https://discord.com/developers/docs/game_sdk/networking#onrouteupdate-example",
        "content": [
          {
            "language": "cs",
            "code": "networkManager.OnRouteUpdate += route =>\n{\n  var currentUser = userManager.GetCurrentUser();\n  var lobbyId = 290926798626357250;\n\n  var txn = lobbyManager.GetMemberUpdateTransaction(lobbyId, currentUser.Id);\n  txn.SetMetadata(\"route\", route);\n  lobbyManager.UpdateMember(lobbyId, currentUser.Id, txn, (result) =>\n  {\n    // Who needs error handling anyway\n    Console.WriteLine(result);\n  });\n}\n"
          }
        ]
      }
    },
    "Flush vs RunCallbacks": {
      "level": 2,
      "url": "https://discord.com/developers/docs/game_sdk/networking#flush-vs-runcallbacks",
      "content": [
        "A quick note here may be helpful for the two functions that should be called continuously in your game loop: discord.RunCallbacks() and networkManager.Flush(). RunCallbacks() pumps the SDK's event loop, sending any newly-received data down the SDK tubes to your game. For this reason, you should call it at the beginning of your game loop; that way, any new data is handled immediately by callbacks you've registered. In Unity, for example, this goes in Update().",
        "Flush() is specific to the network manager. It actually writes the packets out to the stream. You should call this at the end of your game loop as a way of saying \"OK, I'm done with networking stuff, go send all the stuff to people who need it\". In Unity, for example, this goes in LateUpdate()."
      ]
    },
    "Connecting to Each Other": {
      "level": 2,
      "url": "https://discord.com/developers/docs/game_sdk/networking#connecting-to-each-other",
      "content": [
        "This manager is built around the concept of routes between players, and then channels on those routes. Player A opens a route to Player B. This route will change, most commonly if the user's external IP address changes. As that route changes, the player will receive OnRouteUpdate events. They should then alert other lobby members that their route has changed by updating their lobbymetadata. Other lobby members will see those updates from the OnLobbyMemberUpdate event, and can call UpdateRoute() accordingly. A user's route could change frequently, so architect your system anticipating frequent route changes and updates.",
        "Once Player A has a route open to Player B, Player A then opens a channel to Player B, and Player B does the same to Player A. Channels are the pipes down which data is actually sent. These two users can now send data back and forth to each other with SendMessage() and receive it with OnMessage.",
        "In order to properly send and receive data between A and B, both users need to have the same type of channel open to each other on the same channel number. If A has Reliable Channel 4 open to B, B also needs Reliable Channel 4 open to A."
      ]
    },
    "Example: Connecting to Another Player in a Lobby": {
      "level": 2,
      "url": "https://discord.com/developers/docs/game_sdk/networking#example:-connecting-to-another-player-in-a-lobby",
      "content": [
        {
          "language": "cs",
          "code": "var discord = new Discord.Discord(clientId, (UInt64)Discord.CreateFlags.Default);\n\n// Join a lobby with another user in it\n// Get their peer id, and connect to them\n\nvar networkManager = discord.GetNetworkManager();\nvar lobbyManager = discord.GetLobbyManager();\nvar userManager = discord.GetUserManager();\n\nDiscord.User currentUser;\nvar otherUserPeerId;\nvar lobbyId;\n\n// Get yourself\ncurrentUser = userManager.GetCurrentUser();\n\n// This will fire once you connect to the lobby\n// Telling you which route is yours\nnetworkManager.OnRouteUpdate += route =>\n{\n  var txn = lobbyManager.GetMemberUpdateTransaction(lobbyId, currentUser.Id);\n  txn.SetMetadata(\"route\", route);\n  lobbyManager.UpdateMember(lobbyId, currentUser.Id, txn, (result =>\n  {\n    // Who needs error handling anyway\n    Console.WriteLine(result);\n  }))\n}\n\n// When other users get new routes, they'll update their metadata\n// Fetch it and update their route\nlobbyManager.OnMemberUpdate += (lobbyId, userId) =>\n{\n  var rawPeerId = lobbyManager.GetMemberMetadataValue(lobbyId, userId, \"peer_id\");\n  // Metadata is stored as a string, so we need to make it an integer for OpenChannel\n  var peerId = System.Convert.ToUInt64(rawPeerId);\n  var newRoute = lobbyManager.GetMemberMetadataValue(lobbyId, userId, \"route\");\n  lobbyManager.UpdatePeer(peerId, newRoute);\n}\n\n// Connect to lobby with an id of 12345 and a secret of \"password\"\n// This may occur in a generated lobby search, when a user needs to input a password to connect\nlobbyManager.ConnectLobby(12345, \"password\", (Discord.Result x, ref Discord.Lobby lobby) =>\n{\n  lobbyId = lobby.Id;\n\n  // Add our own peer id to our lobby member metadata\n  // So other users can get it to connect to us\n  var localPeerId = Convert.ToString(networkManager.GetPeerId());\n  var txn = lobbyManager.GetMemberUpdateTransaction(lobby.Id, currentUser.Id);\n  txn.SetMetadata(\"peer_id\", localPeerId);\n  lobbyManager.UpdateMember(lobby.Id, currentUser.Id, txn, (result) =>\n  {\n    // Who needs error handling anyway\n    Console.WriteLine(result);\n  });\n\n  // Get the first member in the lobby, assuming someone is already there\n  var memberId = lobbyManager.GetMemberUserId(lobby.Id, 0);\n\n  // Get their peer id and route from their metadata, added previously\n  var rawPeerId = lobbyManager.GetMemberMetadataValue(lobbyId, userId, \"peer_id\");\n  // Metadata is stored as a string, so we need to make it an integer for OpenChannel\n  otherUserPeerId = System.Convert.ToUInt64(rawPeerId);\n  var otherRoute = lobbyManager.GetMemberMetadataValue(lobby.Id, memberId, \"route\");\n\n  // Connect to them\n  networkManager.OpenPeer(otherUserPeerId, otherRoute);\n\n}\n\n// Open an unreliable channel to the user on channel 0\n// And a reliable one on channel 1\nnetworkManager.OpenChannel(otherUserPeerId, 0, false);\nnetworkManager.OpenChannel(otherUserPeerId, 1, true);\n\n// An important data packet from our game engine\nbyte[] data = GameEngine.GetImportantData();\n\n// Determine if that data is about Player Loot Drops, if so send it on reliable, if not send it on unreliable\nif (isDataAboutPlayerLootDrops(data))\n{\n  // This is important and has to get there\n  // Send over reliable channel\n  networkManager.SendMessage(otherUserPeerId, 1, data);\n}\nelse\n{\n    // This is eventually consistent data, like the player's position in the world\n    // It can be sent over the unreliable channel\n    networkManager.SendMessage(otherUserPeerId, 0, data);\n}\n\n// Done; ship it!\nnetworkManager.Flush();\n"
        }
      ]
    }
  }
}