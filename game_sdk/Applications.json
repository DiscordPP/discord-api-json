{
  "content": [
    "|Applications"
  ],
  "Applications": {
    "level": 1,
    "url": "https://discord.com/developers/docs/game-sdk/applications#applications",
    "content": [
      "> info\n> Need help with the SDK? Talk to us in the Discord Developers Server!",
      "> warn\n> Selling SKUs on Discord has now been discontinued as of March 1, 2022. Read here for more info.",
      "> danger\n> The GameSDK's Achievements, Applications, Voice, Images, Lobbies, Networking, Storage, and Store (purchases and discounts) features have been deprecated, and will be decommissioned on May 2, 2023. Read more",
      "Many games run their own backend servers for things like user authentication. If one of those many games is yours, then we've got something for you! This manager gives you access to a bearer token for the currently connected Discord user, which you can send off to your server to do user authentication.",
      "This token is also useful for retrieving information about the connected user's account. Check out our OAuth2 documentation for more information.",
      "These bearer tokens are good for seven days, after which they will expire. When a user reconnects to your game, and is online and connected to the internet, they'll receive a new token that you can grab.",
      "This manager also includes a couple useful helper functions, like getting the locale in which the user has chosen to use their Discord client, and knowing which game branch the game is running on. More about branches in the Dispatch CLI tool section of the documentation.",
      "|Data Models",
      "|GetCurrentLocale",
      "|GetCurrentBranch",
      "|GetOAuth2Token",
      "|ValidateOrExit",
      "|GetTicket",
      "|Example: Get OAuth2 Token"
    ],
    "Data Models": {
      "level": 2,
      "url": "https://discord.com/developers/docs/game-sdk/applications#data-models",
      "content": [
        "|OAuth2Token Struct",
        "|SignedAppTicket Struct"
      ],
      "OAuth2Token Struct": {
        "level": 6,
        "url": "https://discord.com/developers/docs/game-sdk/applications#data-models-oauth2token-struct",
        "content": [
          [
            [
              "name",
              "type",
              "description"
            ],
            [
              "AccessToken",
              "string",
              "a bearer token for the current user"
            ],
            [
              "Scopes",
              "string",
              "a list of oauth2 scopes as a single string, delineated by spaces like \"identify rpc gdm.join\""
            ],
            [
              "Expires",
              "Int64",
              "the timestamp at which the token expires"
            ]
          ]
        ]
      },
      "SignedAppTicket Struct": {
        "level": 6,
        "url": "https://discord.com/developers/docs/game-sdk/applications#data-models-signedappticket-struct",
        "content": [
          [
            [
              "name",
              "type",
              "description"
            ],
            [
              "application_id",
              "Int64",
              "the application id for the ticket"
            ],
            [
              "user",
              "User",
              "the user for the ticket"
            ],
            [
              "entitlements",
              "list of partial Entitlements structs that contain just the SKU id",
              "the list of the user's entitlements for this application"
            ],
            [
              "timestamp",
              "string",
              "the ISO 8601 timestamp for the ticket"
            ]
          ]
        ]
      }
    },
    "GetCurrentLocale": {
      "level": 2,
      "url": "https://discord.com/developers/docs/game-sdk/applications#getcurrentlocale",
      "content": [
        "> info\n> Value from environment variable DISCORD_CURRENT_LOCALE",
        "Gets the locale the current user has Discord set to.",
        "Returns a string.",
        "|Parameters",
        "|Example"
      ],
      "Parameters": {
        "level": 6,
        "url": "https://discord.com/developers/docs/game-sdk/applications#getcurrentlocale-parameters",
        "content": [
          "None"
        ]
      },
      "Example": {
        "level": 6,
        "url": "https://discord.com/developers/docs/game-sdk/applications#getcurrentlocale-example",
        "content": [
          {
            "language": "cs",
            "code": "var locale = applicationManager.GetCurrentLocale();\nConsole.WriteLine(\"This user's language is {0}\", locale);\n"
          }
        ]
      }
    },
    "GetCurrentBranch": {
      "level": 2,
      "url": "https://discord.com/developers/docs/game-sdk/applications#getcurrentbranch",
      "content": [
        "> info\n> Value from environment variable DISCORD_CURRENT_BRANCH",
        "Get the name of pushed branch on which the game is running. These are branches that you created and pushed using Dispatch.",
        "|Parameters",
        "|Example"
      ],
      "Parameters": {
        "level": 6,
        "url": "https://discord.com/developers/docs/game-sdk/applications#getcurrentbranch-parameters",
        "content": [
          "None"
        ]
      },
      "Example": {
        "level": 6,
        "url": "https://discord.com/developers/docs/game-sdk/applications#getcurrentbranch-example",
        "content": [
          {
            "language": "cs",
            "code": "var branch = applicationManager.GetCurrentBranch();\nif (branch != MyBranches.Stable)\n{\n  Console.WriteLine(\"You are on a beta branch; expect bugs!\");\n}\n"
          }
        ]
      }
    },
    "GetOAuth2Token": {
      "level": 2,
      "url": "https://discord.com/developers/docs/game-sdk/applications#getoauth2token",
      "content": [
        "> info\n> value from environment variable DISCORD_ACCESS_TOKEN",
        "> warn\n> Ensure that you have http://127.0.0.1 set as a valid redirect URI for your application in the Developer Portal, or this method will always return an error.",
        "Retrieve an oauth2 bearer token for the current user. If your game was launched from Discord and you call this function, you will automatically receive the token. If the game was not launched from Discord and this method is called, Discord will focus itself and prompt the user for authorization.",
        "Returns a Discord.Result and a ref Discord.OAuth2Token via callback.",
        "|Parameters",
        "|Example"
      ],
      "Parameters": {
        "level": 6,
        "url": "https://discord.com/developers/docs/game-sdk/applications#getoauth2token-parameters",
        "content": [
          "None"
        ]
      },
      "Example": {
        "level": 6,
        "url": "https://discord.com/developers/docs/game-sdk/applications#getoauth2token-example",
        "content": [
          {
            "language": "cs",
            "code": "applicationManager.GetOAuth2Token((Discord.Result result, ref Discord.OAuth2Token token) =>\n{\n  if (result == Discord.Result.Ok)\n  {\n    Console.WriteLine(\"Token for the user: {0}. Expires in {1}\", token.AccessToken, token.Expires);\n    // You may now use this token against Discord's HTTP API\n  }\n});\n"
          }
        ]
      }
    },
    "ValidateOrExit": {
      "level": 2,
      "url": "https://discord.com/developers/docs/game-sdk/applications#validateorexit",
      "content": [
        "Checks if the current user has the entitlement to run this game.",
        "Returns a Discord.Result via callback.",
        "|Parameters",
        "|Example"
      ],
      "Parameters": {
        "level": 6,
        "url": "https://discord.com/developers/docs/game-sdk/applications#validateorexit-parameters",
        "content": [
          "None"
        ]
      },
      "Example": {
        "level": 6,
        "url": "https://discord.com/developers/docs/game-sdk/applications#validateorexit-example",
        "content": [
          {
            "language": "cs",
            "code": "applicationManager.ValidateOrExit((result) =>\n{\n  if (result == Discord.Result.Ok)\n  {\n    // Game keeps running\n  }\n  else\n  {\n    Console.WriteLine(\"Oops! Something went wrong, closing game...\");\n  }\n});\n"
          }
        ]
      }
    },
    "GetTicket": {
      "level": 2,
      "url": "https://discord.com/developers/docs/game-sdk/applications#getticket",
      "content": [
        "|Current Version",
        "|Parameters",
        "|Example"
      ],
      "Current Version": {
        "level": 6,
        "url": "https://discord.com/developers/docs/game-sdk/applications#getticket-current-version",
        "content": [
          [
            [
              "version",
              "status"
            ],
            [
              "2",
              "current"
            ]
          ],
          "Get the signed app ticket for the current user. The structure of the ticket is: version.signature.base64encodedjson, so you should split the string by the . character. Ensure that the version matches the current version. The signature is used to verify the ticket using the libsodium library of your choice, and the base64encodedjson is what you can transform after verification. It contains:",
          [
            "the application id tied to the ticket",
            "the user's user id",
            "a timestamp for the ticket",
            "the list of the user's entitlements for the application id"
          ],
          "These values can be accessed by transforming the string into a SignedAppTicket with your application's private key. The ticket is signed using libsodium which should be available for any programming language. Here's a list of available libraries.",
          "Note that both the public key you receive from Discord and the signature within the app ticket from the SDK are both in hex, and will need to be converted to byte[] before use with libsodium.",
          "Returns a Discord.Result and ref string via callback."
        ]
      },
      "Parameters": {
        "level": 6,
        "url": "https://discord.com/developers/docs/game-sdk/applications#getticket-parameters",
        "content": [
          "None"
        ]
      },
      "Example": {
        "level": 6,
        "url": "https://discord.com/developers/docs/game-sdk/applications#getticket-example",
        "content": [
          {
            "language": "cs",
            "code": "// Handle serialization however works best for you\n// This is just an easy example\n[Serializable]\npublic class SignedAppTicket\n{\n  public long application_id;\n  public Discord.User user;\n  public List<Discord.Entitlement> entitlements;\n  public string timestamp;\n}\n\npublic void DoTheThing()\n{\n  // This example is using the libsodium-net library\n  // https://github.com/adamcaudill/libsodium-net\n  var appManager = discord.GetApplicationManager();\n  var MY_PUBLIC_KEY = \"460cab5f2237b71e3c2c06bzze217f4f68d55db16dae672bdfb6618235589999\";\n  var MY_SKU_ID = \"492432195219099999\";\n\n  // Get the ticket\n  appManager.GetTicket((Discord.Result res, ref string ticket) =>\n  {\n    // Split the ticket into its parts\n    var parts = ticket.Split('.');\n\n    // Ensure the version matches\n    if(parts[0] == \"2\")\n    {\n      // Verify the signature\n      // Your public key will be given to you by Discord\n      if (Sodium.PublicKeyAuth.VerifyDetached(HexToByte(parts[1]), System.Text.Encoding.UTF8.GetBytes(parts[2]), HexToByte(MY_PUBLIC_KEY)))\n      {\n        // If valid, decode the string\n        var byteData = Convert.FromBase64String(parts[2]);\n        var json = System.Text.Encoding.UTF8.GetString(byteData);\n\n        // Deserialize it into the ticket object\n        var myTicket = Newtonsoft.Json.JsonConvert.DeserializeObject<SignedAppTicket>(json);\n\n        // Check for entitlement to the SKU!\n        if (myTicket.entitlements.Any(x => x.SkuId == MY_SKU_ID))\n        {\n          Console.WriteLine(\"User has entitlement to your game\");\n        }\n        else\n        {\n          Console.WriteLine(\"Not entitled\");\n        }\n      }\n    }\n  });\n}\n\npublic byte[] HexToByte(string hex)\n{\n  byte[] data = new byte[hex.Length / 2];\n  for (int i = 0; i < hex.Length; i +=2)\n  {\n    data[i / 2] = Convert.ToByte(hex.Substring(i, 2), 16);\n  }\n  return data;\n}\n"
          }
        ]
      }
    },
    "Example: Get OAuth2 Token": {
      "level": 2,
      "url": "https://discord.com/developers/docs/game-sdk/applications#example:-get-oauth2-token",
      "content": [
        {
          "language": "cs",
          "code": "var discord = new Discord.Discord(clientId, Discord.CreateFlags.Default);\nvar appManager = discord.GetApplicationManager();\n\n// Retrieve the token\nappManager.GetOAuth2Token((Discord.Result result, ref Discord.OAuth2Token token) =>\n{\n  Console.WriteLine(token.AccessToken);\n\n  // Now send that token off to your server to do your own validation!\n})\n"
        }
      ]
    }
  }
}